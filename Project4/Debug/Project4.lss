
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  00000226  2**0
                  ALLOC
  2 .bss          0000000b  00800060  00800060  0000175c  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000142  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000517e  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001138  00000000  00000000  00006d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b2f  00000000  00000000  00007e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  000099bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  0000a050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000193b  00000000  00000000  0000a688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000bfc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000015e8  000015e8  0000173c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000c21c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.A_UART_Void_UARTExecution 000000de  0000081c  0000081c  00000970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data 0000000c  000000c6  000000c6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .text.main    00000334  000000d2  000000d2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.Local_U8_CounterHigh 00000001  0080008b  0080008b  0000175c  2**0
                  ALLOC
 19 .bss.Local_U8_CounterLow 00000001  0080008c  0080008c  0000175c  2**0
                  ALLOC
 20 .bss.Local_U8_UARTSwitch 00000001  0080008d  0080008d  0000175c  2**0
                  ALLOC
 21 .bss.Local_U8_Switch 00000001  0080008e  0080008e  0000175c  2**0
                  ALLOC
 22 .data.Global_A_U8_SetHigh 00000001  0080008f  00001606  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data.Global_A_U8_SetLow 00000001  00800090  00001607  0000175b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss.Global_A_U8P_InputHigh 00000002  00800087  00800087  0000175c  2**0
                  ALLOC
 25 .bss.Global_A_U8P_InputLow 00000002  00800089  00800089  0000175c  2**0
                  ALLOC
 26 .bss.Global_A_F32_Temp 00000004  0080007b  0080007b  0000175c  2**0
                  ALLOC
 27 .text.H_Buzzer_Void_BuzzerInit 0000000a  00001586  00001586  000016da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.H_Buzzer_Void_BuzzerSetOn 0000000a  00001590  00001590  000016e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.H_Buzzer_Void_BuzzerSetOff 0000000a  0000159a  0000159a  000016ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.H_Buzzer_Void_BuzzerOnce 0000001e  000014d6  000014d6  0000162a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.H_DCMotor_Void_ACMotorInit 0000000a  000015a4  000015a4  000016f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.H_KeyPad_Void_KeyPadInit 00000082  00000ed0  00000ed0  00001024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .rodata       00000010  0080006b  000015f6  0000174a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .text.H_KeyPad_U8_KeyPadRead 000000bc  00000b7a  00000b7a  00000cce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.H_LCD_Void_SetLCDPins 00000036  00001396  00001396  000014ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.H_LCD_Void_LCDWriteCharacter 00000070  00000fcc  00000fcc  00001120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.H_LCD_Void_LCDWriteCommand 00000070  0000103c  0000103c  00001190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.H_LCD_Void_LCDInit 00000066  000010ac  000010ac  00001200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.H_LCD_Void_LCDWriteString 00000026  0000148e  0000148e  000015e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.H_LCD_Void_LCDWriteNumber 000000b0  00000cf2  00000cf2  00000e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.H_LCD_Void_LCDWriteFloat 000000e0  0000073c  0000073c  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.H_LCD_Void_LCDGoTo 00000030  00001430  00001430  00001584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.H_LCD_Void_LCDClear 00000008  000015c2  000015c2  00001716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.H_LED_Void_LedInit 00000058  00001170  00001170  000012c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.H_LED_Void_LedSetOn 00000058  000011c8  000011c8  0000131c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.H_LED_Void_LedSetOff 00000058  00001220  00001220  00001374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.M_ADC_Void_ADCInit 00000032  000013cc  000013cc  00001520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.M_ADC_U16_ADCRead 000000bc  00000c36  00000c36  00000d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.M_DIO_Void_SetPinDirection 00000112  00000406  00000406  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.M_DIO_Void_SetPinValue 00000112  00000518  00000518  0000066c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.M_DIO_U8_GetPinValue 00000088  00000e48  00000e48  00000f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.M_DIO_Void_SetPinPullUpRes 00000112  0000062a  0000062a  0000077e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.M_GIE_Void_GlobalInterruptEnable 00000008  000015ca  000015ca  0000171e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__vector_11 000000a6  00000da2  00000da2  00000ef6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .bss.Local_U32_Counter.1760 00000004  0080007f  0080007f  0000175c  2**0
                  ALLOC
 56 .bss.Timer_U8_RemTicks 00000001  00800091  00800091  0000175c  2**0
                  ALLOC
 57 .bss.Timer_U32_NumOfOverFlows 00000004  00800083  00800083  0000175c  2**0
                  ALLOC
 58 .text.M_UART_Void_UARTInit 00000032  000013fe  000013fe  00001552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.M_UART_Void_UARTSetCallBack 0000000a  000015ae  000015ae  00001702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_13 0000004e  00001278  00001278  000013cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text         0000000e  00001534  00001534  00001688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text         000000ce  00000aac  00000aac  00000c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text         00000008  000015d2  000015d2  00001726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text         000000de  000008fa  000008fa  00000a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text         0000000e  00001542  00001542  00001696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text         0000005e  00001112  00001112  00001266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text         0000007a  00000f52  00000f52  000010a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text         00000048  000012c6  000012c6  0000141a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text         0000000c  0000157a  0000157a  000016ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text         00000006  000015e2  000015e2  00001736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text         0000000e  00001550  00001550  000016a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text         0000000e  0000155e  0000155e  000016b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text         00000022  000014b4  000014b4  00001608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text         00000044  0000130e  0000130e  00001462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text         0000000e  0000156c  0000156c  000016c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text         0000000a  000015b8  000015b8  0000170c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text         00000008  000015da  000015da  0000172e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text         000000d4  000009d8  000009d8  00000b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.libgcc.div 00000044  00001352  00001352  000014a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.libgcc.div 0000002e  00001460  00001460  000015b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc.div 00000010  00001524  00001524  00001678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.libgcc  0000001a  000014f4  000014f4  00001648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__dummy_fini 00000002  000015f0  000015f0  00001744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__dummy_funcs_on_exit 00000002  000015f2  000015f2  00001746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__dummy_simulator_exit 00000002  000015f4  000015f4  00001748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.exit    00000016  0000150e  0000150e  00001662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text._Exit   00000004  000015ec  000015ec  00001740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
   8:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
   c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  10:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  14:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  18:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  1c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  20:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  24:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  28:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  2c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_11>
  30:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  34:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_13>
  38:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  3c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  40:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  44:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  48:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  4c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>
  50:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6b       	ori	r16, 0xB0	; 176
  58:	80 00       	.word	0x0080	; ????
  5a:	6b 00       	.word	0x006b	; ????
  5c:	7b 00       	.word	0x007b	; ????
  5e:	15 f6       	brhc	.-124    	; 0xffffffe4 <__eeprom_end+0xff7effe4>
  60:	00 7b       	andi	r16, 0xB0	; 176
  62:	00 8f       	std	Z+24, r16	; 0x18
  64:	80 00       	.word	0x0080	; ????
  66:	8f 00       	.word	0x008f	; ????
  68:	91 00       	.word	0x0091	; ????
  6a:	16 06       	cpc	r1, r22
  6c:	00 91 00 92 	lds	r16, 0x9200	; 0x809200 <__heap_start+0x916e>
  70:	80 00       	.word	0x0080	; ????

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	e4 e5       	ldi	r30, 0x54	; 84
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__do_clear_bss+0x8>
  86:	b5 91       	lpm	r27, Z+
  88:	a5 91       	lpm	r26, Z+
  8a:	35 91       	lpm	r19, Z+
  8c:	25 91       	lpm	r18, Z+
  8e:	05 91       	lpm	r16, Z+
  90:	07 fd       	sbrc	r16, 7
  92:	0c c0       	rjmp	.+24     	; 0xac <__do_clear_bss>
  94:	95 91       	lpm	r25, Z+
  96:	85 91       	lpm	r24, Z+
  98:	ef 01       	movw	r28, r30
  9a:	f9 2f       	mov	r31, r25
  9c:	e8 2f       	mov	r30, r24
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0x20>
  a8:	fe 01       	movw	r30, r28
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_clear_bss+0x8>

000000ac <__do_clear_bss>:
  ac:	1d 92       	st	X+, r1
  ae:	a2 17       	cp	r26, r18
  b0:	b3 07       	cpc	r27, r19
  b2:	e1 f7       	brne	.-8      	; 0xac <__do_clear_bss>
  b4:	e1 37       	cpi	r30, 0x71	; 113
  b6:	f4 07       	cpc	r31, r20
  b8:	31 f7       	brne	.-52     	; 0x86 <__do_copy_data+0x8>
  ba:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  be:	0c 94 87 0a 	jmp	0x150e	; 0x150e <exit>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>

Disassembly of section .text:

000015e8 <__bad_interrupt>:
    15e8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.A_UART_Void_UARTExecution:

0000081c <A_UART_Void_UARTExecution>:
		
}

void A_UART_Void_UARTExecution(void)
{
	Global_A_U8_UARTInput=UDR_REG;
 81c:	8c b1       	in	r24, 0x0c	; 12
 81e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (Global_A_U8_UARTInput !=69)
 822:	85 34       	cpi	r24, 0x45	; 69
 824:	09 f4       	brne	.+2      	; 0x828 <A_UART_Void_UARTExecution+0xc>
 826:	68 c0       	rjmp	.+208    	; 0x8f8 <__stack+0x99>
	{
		H_Buzzer_Void_BuzzerSetOn();
 828:	0e 94 c8 0a 	call	0x1590	; 0x1590 <H_Buzzer_Void_BuzzerSetOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 82c:	2f ef       	ldi	r18, 0xFF	; 255
 82e:	83 ec       	ldi	r24, 0xC3	; 195
 830:	99 e0       	ldi	r25, 0x09	; 9
 832:	21 50       	subi	r18, 0x01	; 1
 834:	80 40       	sbci	r24, 0x00	; 0
 836:	90 40       	sbci	r25, 0x00	; 0
 838:	e1 f7       	brne	.-8      	; 0x832 <A_UART_Void_UARTExecution+0x16>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <A_UART_Void_UARTExecution+0x20>
 83c:	00 00       	nop
		_delay_ms(200);
		H_Buzzer_Void_BuzzerSetOff();
 83e:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Buzzer_Void_BuzzerSetOff>
		if (Global_A_U8_UARTInput == 67 || Local_U8_UARTSwitch == 1)
 842:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 846:	83 34       	cpi	r24, 0x43	; 67
 848:	21 f0       	breq	.+8      	; 0x852 <A_UART_Void_UARTExecution+0x36>
 84a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <Local_U8_UARTSwitch>
 84e:	91 30       	cpi	r25, 0x01	; 1
 850:	49 f5       	brne	.+82     	; 0x8a4 <__stack+0x45>
		{
			if(Local_U8_UARTSwitch == 1)
 852:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <Local_U8_UARTSwitch>
 856:	91 30       	cpi	r25, 0x01	; 1
 858:	51 f4       	brne	.+20     	; 0x86e <__stack+0xf>
			{
				Global_A_U8P_InputLow[Local_U8_CounterLow] = Global_A_U8_UARTInput;
 85a:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <Local_U8_CounterLow>
 85e:	e9 2f       	mov	r30, r25
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	e7 57       	subi	r30, 0x77	; 119
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	80 83       	st	Z, r24
				Local_U8_CounterLow++;
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <Local_U8_CounterLow>
			}
			Local_U8_UARTSwitch = 1;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Local_U8_UARTSwitch>
			if(Local_U8_CounterLow == 2)
 874:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Local_U8_CounterLow>
 878:	82 30       	cpi	r24, 0x02	; 2
 87a:	f1 f5       	brne	.+124    	; 0x8f8 <__stack+0x99>
			{
				Local_U8_CounterLow = 0;
 87c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <Local_U8_CounterLow>
				Local_U8_UARTSwitch = 0;
 880:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Local_U8_UARTSwitch>
				Global_A_U8_SetLow = ((Global_A_U8P_InputLow[0]-48)*10) + (Global_A_U8P_InputLow[1]-48);
 884:	e9 e8       	ldi	r30, 0x89	; 137
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	c0 97       	sbiw	r24, 0x30	; 48
 88e:	91 81       	ldd	r25, Z+1	; 0x01
 890:	88 0f       	add	r24, r24
 892:	28 2f       	mov	r18, r24
 894:	22 0f       	add	r18, r18
 896:	22 0f       	add	r18, r18
 898:	82 0f       	add	r24, r18
 89a:	89 0f       	add	r24, r25
 89c:	80 53       	subi	r24, 0x30	; 48
 89e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <Global_A_U8_SetLow>
 8a2:	08 95       	ret
			}
		}
		else if (Global_A_U8_UARTInput == 68 || Local_U8_UARTSwitch == 2)
 8a4:	84 34       	cpi	r24, 0x44	; 68
 8a6:	11 f0       	breq	.+4      	; 0x8ac <__stack+0x4d>
 8a8:	92 30       	cpi	r25, 0x02	; 2
 8aa:	31 f5       	brne	.+76     	; 0x8f8 <__stack+0x99>
		{
			if(Local_U8_UARTSwitch == 2)
 8ac:	92 30       	cpi	r25, 0x02	; 2
 8ae:	51 f4       	brne	.+20     	; 0x8c4 <__stack+0x65>
			{
				Global_A_U8P_InputHigh[Local_U8_CounterHigh] = Global_A_U8_UARTInput;
 8b0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Local_U8_CounterHigh>
 8b4:	e9 2f       	mov	r30, r25
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	e9 57       	subi	r30, 0x79	; 121
 8ba:	ff 4f       	sbci	r31, 0xFF	; 255
 8bc:	80 83       	st	Z, r24
				Local_U8_CounterHigh++;
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Local_U8_CounterHigh>
			}
			Local_U8_UARTSwitch = 2;
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Local_U8_UARTSwitch>
			if(Local_U8_CounterHigh == 2)
 8ca:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <Local_U8_CounterHigh>
 8ce:	82 30       	cpi	r24, 0x02	; 2
 8d0:	99 f4       	brne	.+38     	; 0x8f8 <__stack+0x99>
			{
				Local_U8_CounterHigh = 0;
 8d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Local_U8_CounterHigh>
				Local_U8_UARTSwitch = 0;
 8d6:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Local_U8_UARTSwitch>
				Global_A_U8_SetHigh = ((Global_A_U8P_InputHigh[0]-48)*10) + (Global_A_U8P_InputHigh[1]-48);
 8da:	e7 e8       	ldi	r30, 0x87	; 135
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	c0 97       	sbiw	r24, 0x30	; 48
 8e4:	91 81       	ldd	r25, Z+1	; 0x01
 8e6:	88 0f       	add	r24, r24
 8e8:	28 2f       	mov	r18, r24
 8ea:	22 0f       	add	r18, r18
 8ec:	22 0f       	add	r18, r18
 8ee:	82 0f       	add	r24, r18
 8f0:	89 0f       	add	r24, r25
 8f2:	80 53       	subi	r24, 0x30	; 48
 8f4:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Global_A_U8_SetHigh>
 8f8:	08 95       	ret

Disassembly of section .text.main:

000000d2 <main>:
u8 Local_U8_CounterLow = 0;
u8 Local_U8_CounterHigh = 0;


int main()
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	68 97       	sbiw	r28, 0x18	; 24
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	M_ADC_Void_ADCInit();
  e6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <M_ADC_Void_ADCInit>
	H_LCD_Void_LCDInit();
  ea:	0e 94 56 08 	call	0x10ac	; 0x10ac <H_LCD_Void_LCDInit>
	H_DCMotor_Void_ACMotorInit();
  ee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <H_DCMotor_Void_ACMotorInit>
	H_LED_Void_LedInit(1);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 b8 08 	call	0x1170	; 0x1170 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(2);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 b8 08 	call	0x1170	; 0x1170 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(3);
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 b8 08 	call	0x1170	; 0x1170 <H_LED_Void_LedInit>
	H_Buzzer_Void_BuzzerInit();
 104:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Buzzer_Void_BuzzerInit>
	H_KeyPad_Void_KeyPadInit();
 108:	0e 94 68 07 	call	0xed0	; 0xed0 <H_KeyPad_Void_KeyPadInit>
	M_GIE_Void_GlobalInterruptEnable();
 10c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <M_GIE_Void_GlobalInterruptEnable>
	M_UART_Void_UARTInit();
 110:	0e 94 ff 09 	call	0x13fe	; 0x13fe <M_UART_Void_UARTInit>
	M_UART_Void_UARTSetCallBack(A_UART_Void_UARTExecution);
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <M_UART_Void_UARTSetCallBack>
	M_DIO_Void_SetPinDirection(20,1);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	84 e1       	ldi	r24, 0x14	; 20
 120:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(32,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(42,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	8a e2       	ldi	r24, 0x2A	; 42
 130:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(42,0);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	8a e2       	ldi	r24, 0x2A	; 42
 138:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(20,1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	84 e1       	ldi	r24, 0x14	; 20
 140:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>

	
	f32 Local_F32_Resistance = 9.1;
	f32 Local_F32_Voltage = 25;

	u8 Temp[]="Temp: ";
 144:	26 ec       	ldi	r18, 0xC6	; 198
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	f9 01       	movw	r30, r18
 14e:	de 01       	movw	r26, r28
 150:	11 96       	adiw	r26, 0x01	; 1
 152:	74 2f       	mov	r23, r20
 154:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__movmemx_qi>
	u8 TempLow[]="Tl:";
 158:	84 e5       	ldi	r24, 0x54	; 84
 15a:	9c e6       	ldi	r25, 0x6C	; 108
 15c:	99 87       	std	Y+9, r25	; 0x09
 15e:	88 87       	std	Y+8, r24	; 0x08
 160:	8a e3       	ldi	r24, 0x3A	; 58
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	9b 87       	std	Y+11, r25	; 0x0b
 166:	8a 87       	std	Y+10, r24	; 0x0a
	u8 TempHigh[]="Th:";
 168:	24 e5       	ldi	r18, 0x54	; 84
 16a:	38 e6       	ldi	r19, 0x68	; 104
 16c:	3d 87       	std	Y+13, r19	; 0x0d
 16e:	2c 87       	std	Y+12, r18	; 0x0c
 170:	9f 87       	std	Y+15, r25	; 0x0f
 172:	8e 87       	std	Y+14, r24	; 0x0e
	u8 Low[]="Low";
 174:	8c e4       	ldi	r24, 0x4C	; 76
 176:	9f e6       	ldi	r25, 0x6F	; 111
 178:	99 8b       	std	Y+17, r25	; 0x11
 17a:	88 8b       	std	Y+16, r24	; 0x10
 17c:	87 e7       	ldi	r24, 0x77	; 119
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9b 8b       	std	Y+19, r25	; 0x13
 182:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Norm[]="Norm";
	u8 High[]="High";
 184:	2d ec       	ldi	r18, 0xCD	; 205
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	f9 01       	movw	r30, r18
 18e:	de 01       	movw	r26, r28
 190:	54 96       	adiw	r26, 0x14	; 20
 192:	74 2f       	mov	r23, r20
 194:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__movmemx_qi>


	while(1)
	{
		Local_F32_Voltage = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 1b 06 	call	0xc36	; 0xc36 <M_ADC_U16_ADCRead>
 19e:	bc 01       	movw	r22, r24
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
		Local_F32_Voltage = (f32)((f32)(Local_F32_Voltage*0.0048828125)/101.3425926);
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 ea       	ldi	r20, 0xA0	; 160
 1ae:	5b e3       	ldi	r21, 0x3B	; 59
 1b0:	0e 94 ed 0a 	call	0x15da	; 0x15da <__mulsf3>
 1b4:	28 e6       	ldi	r18, 0x68	; 104
 1b6:	3f ea       	ldi	r19, 0xAF	; 175
 1b8:	4a ec       	ldi	r20, 0xCA	; 202
 1ba:	52 e4       	ldi	r21, 0x42	; 66
 1bc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__divsf3>
		Local_F32_Resistance = Local_F32_Voltage/0.0004905862088;
 1c0:	2f ea       	ldi	r18, 0xAF	; 175
 1c2:	3a e9       	ldi	r19, 0x9A	; 154
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	5a e3       	ldi	r21, 0x3A	; 58
 1c8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__divsf3>
		Global_A_F32_Temp = Local_F32_Resistance/0.385;
 1cc:	28 eb       	ldi	r18, 0xB8	; 184
 1ce:	3e e1       	ldi	r19, 0x1E	; 30
 1d0:	45 ec       	ldi	r20, 0xC5	; 197
 1d2:	5e e3       	ldi	r21, 0x3E	; 62
 1d4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__divsf3>
 1d8:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <Global_A_F32_Temp>
 1dc:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <Global_A_F32_Temp+0x1>
 1e0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Global_A_F32_Temp+0x2>
 1e4:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <Global_A_F32_Temp+0x3>
		
		H_LCD_Void_LCDClear();
 1e8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <H_LCD_Void_LCDClear>
		H_LCD_Void_LCDGoTo(0,0);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 18 0a 	call	0x1430	; 0x1430 <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString(Temp);
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	0e 94 47 0a 	call	0x148e	; 0x148e <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDWriteFloat(Global_A_F32_Temp);
 1fc:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <Global_A_F32_Temp>
 200:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <Global_A_F32_Temp+0x1>
 204:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Global_A_F32_Temp+0x2>
 208:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Global_A_F32_Temp+0x3>
 20c:	0e 94 9e 03 	call	0x73c	; 0x73c <H_LCD_Void_LCDWriteFloat>
		H_LCD_Void_LCDWriteCharacter(' ');
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		H_LCD_Void_LCDWriteCharacter('C');
 216:	83 e4       	ldi	r24, 0x43	; 67
 218:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		
		H_LCD_Void_LCDGoTo(1,0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 18 0a 	call	0x1430	; 0x1430 <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString(TempLow);
 224:	ce 01       	movw	r24, r28
 226:	08 96       	adiw	r24, 0x08	; 8
 228:	0e 94 47 0a 	call	0x148e	; 0x148e <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDWriteNumber(Global_A_U8_SetLow);
 22c:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <Global_A_U8_SetLow>
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 79 06 	call	0xcf2	; 0xcf2 <H_LCD_Void_LCDWriteNumber>
		H_LCD_Void_LCDWriteCharacter(' ');
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		H_LCD_Void_LCDWriteString(TempHigh);
 240:	ce 01       	movw	r24, r28
 242:	0c 96       	adiw	r24, 0x0c	; 12
 244:	0e 94 47 0a 	call	0x148e	; 0x148e <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDWriteNumber(Global_A_U8_SetHigh);
 248:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <Global_A_U8_SetHigh>
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 79 06 	call	0xcf2	; 0xcf2 <H_LCD_Void_LCDWriteNumber>
		H_LCD_Void_LCDWriteCharacter(' ');
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>

		
		if(Global_A_F32_Temp < Global_A_U8_SetLow)
 25c:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <Global_A_U8_SetLow>
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 ab 07 	call	0xf56	; 0xf56 <__floatsisf>
 26a:	c0 90 7b 00 	lds	r12, 0x007B	; 0x80007b <Global_A_F32_Temp>
 26e:	d0 90 7c 00 	lds	r13, 0x007C	; 0x80007c <Global_A_F32_Temp+0x1>
 272:	e0 90 7d 00 	lds	r14, 0x007D	; 0x80007d <Global_A_F32_Temp+0x2>
 276:	f0 90 7e 00 	lds	r15, 0x007E	; 0x80007e <Global_A_F32_Temp+0x3>
 27a:	a7 01       	movw	r20, r14
 27c:	96 01       	movw	r18, r12
 27e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__gesf2>
 282:	18 16       	cp	r1, r24
 284:	9c f4       	brge	.+38     	; 0x2ac <main+0x1da>
		{
			H_LED_Void_LedSetOn(1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <H_LED_Void_LedSetOn>
			H_LED_Void_LedSetOff(2);
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 10 09 	call	0x1220	; 0x1220 <H_LED_Void_LedSetOff>
			M_DIO_Void_SetPinValue(20,1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	84 e1       	ldi	r24, 0x14	; 20
 296:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(42,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	8a e2       	ldi	r24, 0x2A	; 42
 29e:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
			H_LCD_Void_LCDWriteString(Low);
 2a2:	ce 01       	movw	r24, r28
 2a4:	40 96       	adiw	r24, 0x10	; 16
 2a6:	0e 94 47 0a 	call	0x148e	; 0x148e <H_LCD_Void_LCDWriteString>
 2aa:	21 c0       	rjmp	.+66     	; 0x2ee <main+0x21c>
			H_LED_Void_LedSetOff(2);
			M_DIO_Void_SetPinValue(20,0);
			M_DIO_Void_SetPinValue(42,0);
			H_LCD_Void_LCDWriteString(Norm);
		}*/
		else if (Global_A_F32_Temp > Global_A_U8_SetHigh)
 2ac:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <Global_A_U8_SetHigh>
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 ab 07 	call	0xf56	; 0xf56 <__floatsisf>
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__gesf2>
 2c6:	18 16       	cp	r1, r24
 2c8:	94 f4       	brge	.+36     	; 0x2ee <main+0x21c>
		{
			H_LED_Void_LedSetOff(1);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 10 09 	call	0x1220	; 0x1220 <H_LED_Void_LedSetOff>
			H_LED_Void_LedSetOn(2);
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <H_LED_Void_LedSetOn>
			M_DIO_Void_SetPinValue(20,0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(42,1);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	8a e2       	ldi	r24, 0x2A	; 42
 2e2:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
			H_LCD_Void_LCDWriteString(High);
 2e6:	ce 01       	movw	r24, r28
 2e8:	44 96       	adiw	r24, 0x14	; 20
 2ea:	0e 94 47 0a 	call	0x148e	; 0x148e <H_LCD_Void_LCDWriteString>
		}
		
		if(H_KeyPad_U8_KeyPadRead() == 65 || Local_U8_Switch == 1)
 2ee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <H_KeyPad_U8_KeyPadRead>
 2f2:	81 34       	cpi	r24, 0x41	; 65
 2f4:	21 f0       	breq	.+8      	; 0x2fe <main+0x22c>
 2f6:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Local_U8_Switch>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	c9 f5       	brne	.+114    	; 0x370 <main+0x29e>
		{
			H_Buzzer_Void_BuzzerSetOn();
 2fe:	0e 94 c8 0a 	call	0x1590	; 0x1590 <H_Buzzer_Void_BuzzerSetOn>
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	83 ec       	ldi	r24, 0xC3	; 195
 306:	99 e0       	ldi	r25, 0x09	; 9
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x236>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x240>
 312:	00 00       	nop
			_delay_ms(200);
			H_Buzzer_Void_BuzzerSetOff();
 314:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Buzzer_Void_BuzzerSetOff>
			Local_U8_Switch = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Local_U8_Switch>
			if ((Global_A_U8P_InputLow[Local_U8_CounterLow] = H_KeyPad_U8_KeyPadRead()) != 0)
 31e:	00 91 8c 00 	lds	r16, 0x008C	; 0x80008c <Local_U8_CounterLow>
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	0e 94 bd 05 	call	0xb7a	; 0xb7a <H_KeyPad_U8_KeyPadRead>
 328:	f8 01       	movw	r30, r16
 32a:	e7 57       	subi	r30, 0x77	; 119
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	80 83       	st	Z, r24
 330:	88 23       	and	r24, r24
 332:	29 f0       	breq	.+10     	; 0x33e <main+0x26c>
				Local_U8_CounterLow++;
 334:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Local_U8_CounterLow>
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Local_U8_CounterLow>
			if(Local_U8_CounterLow == 2)
 33e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Local_U8_CounterLow>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x276>
 346:	55 c0       	rjmp	.+170    	; 0x3f2 <main+0x320>
			{
				Local_U8_CounterLow = 0;
 348:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <Local_U8_CounterLow>
				Local_U8_Switch = 0;
 34c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <Local_U8_Switch>
				Global_A_U8_SetLow = ((Global_A_U8P_InputLow[0]-48)*10) + (Global_A_U8P_InputLow[1]-48);
 350:	e9 e8       	ldi	r30, 0x89	; 137
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	c0 97       	sbiw	r24, 0x30	; 48
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	88 0f       	add	r24, r24
 35e:	28 2f       	mov	r18, r24
 360:	22 0f       	add	r18, r18
 362:	22 0f       	add	r18, r18
 364:	82 0f       	add	r24, r18
 366:	89 0f       	add	r24, r25
 368:	80 53       	subi	r24, 0x30	; 48
 36a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <Global_A_U8_SetLow>
 36e:	41 c0       	rjmp	.+130    	; 0x3f2 <main+0x320>
			}
		}
		else if(H_KeyPad_U8_KeyPadRead() == 66 || Local_U8_Switch == 2)
 370:	0e 94 bd 05 	call	0xb7a	; 0xb7a <H_KeyPad_U8_KeyPadRead>
 374:	82 34       	cpi	r24, 0x42	; 66
 376:	21 f0       	breq	.+8      	; 0x380 <main+0x2ae>
 378:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Local_U8_Switch>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	c9 f5       	brne	.+114    	; 0x3f2 <main+0x320>
		{
			H_Buzzer_Void_BuzzerSetOn();
 380:	0e 94 c8 0a 	call	0x1590	; 0x1590 <H_Buzzer_Void_BuzzerSetOn>
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	83 ec       	ldi	r24, 0xC3	; 195
 388:	99 e0       	ldi	r25, 0x09	; 9
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x2b8>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0x2c2>
 394:	00 00       	nop
			_delay_ms(200);
			H_Buzzer_Void_BuzzerSetOff();
 396:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Buzzer_Void_BuzzerSetOff>
			Local_U8_Switch = 2;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Local_U8_Switch>
			if ((Global_A_U8P_InputHigh[Local_U8_CounterHigh] = H_KeyPad_U8_KeyPadRead()) != 0)
 3a0:	00 91 8b 00 	lds	r16, 0x008B	; 0x80008b <Local_U8_CounterHigh>
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <H_KeyPad_U8_KeyPadRead>
 3aa:	f8 01       	movw	r30, r16
 3ac:	e9 57       	subi	r30, 0x79	; 121
 3ae:	ff 4f       	sbci	r31, 0xFF	; 255
 3b0:	80 83       	st	Z, r24
 3b2:	88 23       	and	r24, r24
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <main+0x2f2>
			{
				Local_U8_CounterHigh++;
 3b6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <Local_U8_CounterHigh>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <Local_U8_CounterHigh>
				H_Buzzer_Void_BuzzerOnce();
 3c0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <H_Buzzer_Void_BuzzerOnce>
			}
			if(Local_U8_CounterHigh == 2)
 3c4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <Local_U8_CounterHigh>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	99 f4       	brne	.+38     	; 0x3f2 <main+0x320>
			{
				Local_U8_CounterHigh = 0;
 3cc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Local_U8_CounterHigh>
				Local_U8_Switch = 0;
 3d0:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <Local_U8_Switch>
				Global_A_U8_SetHigh = ((Global_A_U8P_InputHigh[0]-48)*10) + (Global_A_U8P_InputHigh[1]-48);
 3d4:	e7 e8       	ldi	r30, 0x87	; 135
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	c0 97       	sbiw	r24, 0x30	; 48
 3de:	91 81       	ldd	r25, Z+1	; 0x01
 3e0:	88 0f       	add	r24, r24
 3e2:	28 2f       	mov	r18, r24
 3e4:	22 0f       	add	r18, r18
 3e6:	22 0f       	add	r18, r18
 3e8:	82 0f       	add	r24, r18
 3ea:	89 0f       	add	r24, r25
 3ec:	80 53       	subi	r24, 0x30	; 48
 3ee:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Global_A_U8_SetHigh>
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	83 ec       	ldi	r24, 0xC3	; 195
 3f6:	99 e0       	ldi	r25, 0x09	; 9
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x326>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	c9 ce       	rjmp	.-622    	; 0x198 <main+0xc6>

Disassembly of section .text.H_Buzzer_Void_BuzzerInit:

00001586 <H_Buzzer_Void_BuzzerInit>:

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	8d e0       	ldi	r24, 0x0D	; 13
    158a:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    158e:	08 95       	ret

Disassembly of section .text.H_Buzzer_Void_BuzzerSetOn:

00001590 <H_Buzzer_Void_BuzzerSetOn>:
}
void H_Buzzer_Void_BuzzerSetOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	8d e0       	ldi	r24, 0x0D	; 13
    1594:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1598:	08 95       	ret

Disassembly of section .text.H_Buzzer_Void_BuzzerSetOff:

0000159a <H_Buzzer_Void_BuzzerSetOff>:
}
void H_Buzzer_Void_BuzzerSetOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	8d e0       	ldi	r24, 0x0D	; 13
    159e:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    15a2:	08 95       	ret

Disassembly of section .text.H_Buzzer_Void_BuzzerOnce:

000014d6 <H_Buzzer_Void_BuzzerOnce>:
}
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	8d e0       	ldi	r24, 0x0D	; 13
    14da:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    14de:	87 e9       	ldi	r24, 0x97	; 151
    14e0:	9a e3       	ldi	r25, 0x3A	; 58
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <H_Buzzer_Void_BuzzerOnce+0xc>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <H_Buzzer_Void_BuzzerOnce+0x12>
    14e8:	00 00       	nop
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	8d e0       	ldi	r24, 0x0D	; 13
    14ee:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    14f2:	08 95       	ret

Disassembly of section .text.H_DCMotor_Void_ACMotorInit:

000015a4 <H_DCMotor_Void_ACMotorInit>:
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
}

void H_DCMotor_Void_ACMotorInit(void)
{
	M_DIO_Void_SetPinDirection(PD4_PIN,OUTPUT);
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	8c e2       	ldi	r24, 0x2C	; 44
    15a8:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    15ac:	08 95       	ret

Disassembly of section .text.H_KeyPad_Void_KeyPadInit:

00000ed0 <H_KeyPad_Void_KeyPadInit>:

void (*KeyPad_CallBack) (u8,u8,u8*);

void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
 ed0:	61 e0       	ldi	r22, 0x01	; 1
 ed2:	81 e2       	ldi	r24, 0x21	; 33
 ed4:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
 ed8:	61 e0       	ldi	r22, 0x01	; 1
 eda:	82 e2       	ldi	r24, 0x22	; 34
 edc:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
 ee0:	61 e0       	ldi	r22, 0x01	; 1
 ee2:	83 e2       	ldi	r24, 0x23	; 35
 ee4:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
 ee8:	61 e0       	ldi	r22, 0x01	; 1
 eea:	84 e2       	ldi	r24, 0x24	; 36
 eec:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
 ef0:	60 e0       	ldi	r22, 0x00	; 0
 ef2:	88 e1       	ldi	r24, 0x18	; 24
 ef4:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
 ef8:	60 e0       	ldi	r22, 0x00	; 0
 efa:	89 e1       	ldi	r24, 0x19	; 25
 efc:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
 f00:	60 e0       	ldi	r22, 0x00	; 0
 f02:	8a e1       	ldi	r24, 0x1A	; 26
 f04:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
 f08:	60 e0       	ldi	r22, 0x00	; 0
 f0a:	8b e1       	ldi	r24, 0x1B	; 27
 f0c:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	// to activate internal pull up res
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C0_PIN,ENABLE);
 f10:	61 e0       	ldi	r22, 0x01	; 1
 f12:	88 e1       	ldi	r24, 0x18	; 24
 f14:	0e 94 15 03 	call	0x62a	; 0x62a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C1_PIN,ENABLE);
 f18:	61 e0       	ldi	r22, 0x01	; 1
 f1a:	89 e1       	ldi	r24, 0x19	; 25
 f1c:	0e 94 15 03 	call	0x62a	; 0x62a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
 f20:	61 e0       	ldi	r22, 0x01	; 1
 f22:	8a e1       	ldi	r24, 0x1A	; 26
 f24:	0e 94 15 03 	call	0x62a	; 0x62a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
 f28:	61 e0       	ldi	r22, 0x01	; 1
 f2a:	8b e1       	ldi	r24, 0x1B	; 27
 f2c:	0e 94 15 03 	call	0x62a	; 0x62a <M_DIO_Void_SetPinPullUpRes>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
 f30:	61 e0       	ldi	r22, 0x01	; 1
 f32:	81 e2       	ldi	r24, 0x21	; 33
 f34:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
 f38:	61 e0       	ldi	r22, 0x01	; 1
 f3a:	82 e2       	ldi	r24, 0x22	; 34
 f3c:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
 f40:	61 e0       	ldi	r22, 0x01	; 1
 f42:	83 e2       	ldi	r24, 0x23	; 35
 f44:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
 f48:	61 e0       	ldi	r22, 0x01	; 1
 f4a:	84 e2       	ldi	r24, 0x24	; 36
 f4c:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
 f50:	08 95       	ret

Disassembly of section .text.H_KeyPad_U8_KeyPadRead:

00000b7a <H_KeyPad_U8_KeyPadRead>:
}
u8   H_KeyPad_U8_KeyPadRead(void)
{
 b7a:	ff 92       	push	r15
 b7c:	0f 93       	push	r16
 b7e:	1f 93       	push	r17
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
 b88:	60 97       	sbiw	r28, 0x10	; 16
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
 b94:	80 e1       	ldi	r24, 0x10	; 16
 b96:	eb e6       	ldi	r30, 0x6B	; 107
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	de 01       	movw	r26, r28
 b9c:	11 96       	adiw	r26, 0x01	; 1
 b9e:	01 90       	ld	r0, Z+
 ba0:	0d 92       	st	X+, r0
 ba2:	8a 95       	dec	r24
 ba4:	e1 f7       	brne	.-8      	; 0xb9e <H_KeyPad_U8_KeyPadRead+0x24>
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
 ba6:	01 e2       	ldi	r16, 0x21	; 33
{
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
	u8 Local_U8_Reading = 0;
 ba8:	f1 2c       	mov	r15, r1
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
 baa:	36 c0       	rjmp	.+108    	; 0xc18 <H_KeyPad_U8_KeyPadRead+0x9e>
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	80 2f       	mov	r24, r16
 bb0:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
 bb4:	18 e1       	ldi	r17, 0x18	; 24
 bb6:	29 c0       	rjmp	.+82     	; 0xc0a <H_KeyPad_U8_KeyPadRead+0x90>
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
 bb8:	81 2f       	mov	r24, r17
 bba:	0e 94 24 07 	call	0xe48	; 0xe48 <M_DIO_U8_GetPinValue>
 bbe:	81 11       	cpse	r24, r1
 bc0:	23 c0       	rjmp	.+70     	; 0xc08 <H_KeyPad_U8_KeyPadRead+0x8e>
 bc2:	8f e2       	ldi	r24, 0x2F	; 47
 bc4:	95 e7       	ldi	r25, 0x75	; 117
 bc6:	01 97       	sbiw	r24, 0x01	; 1
 bc8:	f1 f7       	brne	.-4      	; 0xbc6 <H_KeyPad_U8_KeyPadRead+0x4c>
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <H_KeyPad_U8_KeyPadRead+0x52>
 bcc:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
 bce:	81 2f       	mov	r24, r17
 bd0:	0e 94 24 07 	call	0xe48	; 0xe48 <M_DIO_U8_GetPinValue>
 bd4:	81 11       	cpse	r24, r1
 bd6:	18 c0       	rjmp	.+48     	; 0xc08 <H_KeyPad_U8_KeyPadRead+0x8e>
				{
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
 bd8:	e0 2f       	mov	r30, r16
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	9f 01       	movw	r18, r30
 bde:	21 52       	subi	r18, 0x21	; 33
 be0:	31 09       	sbc	r19, r1
 be2:	e1 2f       	mov	r30, r17
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	cf 01       	movw	r24, r30
 be8:	48 97       	sbiw	r24, 0x18	; 24
 bea:	f9 01       	movw	r30, r18
 bec:	ee 0f       	add	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	ee 0f       	add	r30, r30
 bf2:	ff 1f       	adc	r31, r31
 bf4:	21 e0       	ldi	r18, 0x01	; 1
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	2c 0f       	add	r18, r28
 bfa:	3d 1f       	adc	r19, r29
 bfc:	e2 0f       	add	r30, r18
 bfe:	f3 1f       	adc	r31, r19
 c00:	e8 0f       	add	r30, r24
 c02:	f9 1f       	adc	r31, r25
 c04:	f0 80       	ld	r15, Z
					break;
 c06:	03 c0       	rjmp	.+6      	; 0xc0e <H_KeyPad_U8_KeyPadRead+0x94>
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
 c08:	1f 5f       	subi	r17, 0xFF	; 255
 c0a:	1c 31       	cpi	r17, 0x1C	; 28
 c0c:	a8 f2       	brcs	.-86     	; 0xbb8 <H_KeyPad_U8_KeyPadRead+0x3e>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
					break;
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
 c0e:	61 e0       	ldi	r22, 0x01	; 1
 c10:	80 2f       	mov	r24, r16
 c12:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
 c16:	0f 5f       	subi	r16, 0xFF	; 255
 c18:	05 32       	cpi	r16, 0x25	; 37
 c1a:	40 f2       	brcs	.-112    	; 0xbac <H_KeyPad_U8_KeyPadRead+0x32>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
	}
	return Local_U8_Reading;
}
 c1c:	8f 2d       	mov	r24, r15
 c1e:	60 96       	adiw	r28, 0x10	; 16
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	1f 91       	pop	r17
 c30:	0f 91       	pop	r16
 c32:	ff 90       	pop	r15
 c34:	08 95       	ret

Disassembly of section .text.H_LCD_Void_SetLCDPins:

00001396 <H_LCD_Void_SetLCDPins>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
}

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    1396:	cf 93       	push	r28
    1398:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    139a:	68 2f       	mov	r22, r24
    139c:	61 70       	andi	r22, 0x01	; 1
    139e:	8e e0       	ldi	r24, 0x0E	; 14
    13a0:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    13a4:	c1 fb       	bst	r28, 1
    13a6:	66 27       	eor	r22, r22
    13a8:	60 f9       	bld	r22, 0
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    13b0:	c2 fb       	bst	r28, 2
    13b2:	66 27       	eor	r22, r22
    13b4:	60 f9       	bld	r22, 0
    13b6:	80 e1       	ldi	r24, 0x10	; 16
    13b8:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    13bc:	c3 fb       	bst	r28, 3
    13be:	66 27       	eor	r22, r22
    13c0:	60 f9       	bld	r22, 0
    13c2:	81 e1       	ldi	r24, 0x11	; 17
    13c4:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
#endif
}
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDWriteCharacter:

00000fcc <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#endif

}
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     fcc:	cf 93       	push	r28
     fce:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	85 e1       	ldi	r24, 0x15	; 21
     fd4:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
     fd8:	8c 2f       	mov	r24, r28
     fda:	82 95       	swap	r24
     fdc:	8f 70       	andi	r24, 0x0F	; 15
     fde:	0e 94 cb 09 	call	0x1396	; 0x1396 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	87 e1       	ldi	r24, 0x17	; 23
     fe6:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
     fea:	8f e9       	ldi	r24, 0x9F	; 159
     fec:	9f e0       	ldi	r25, 0x0F	; 15
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <H_LCD_Void_LCDWriteCharacter+0x22>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <H_LCD_Void_LCDWriteCharacter+0x28>
     ff4:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	87 e1       	ldi	r24, 0x17	; 23
     ffa:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
     ffe:	8f e9       	ldi	r24, 0x9F	; 159
    1000:	9f e0       	ldi	r25, 0x0F	; 15
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <H_LCD_Void_LCDWriteCharacter+0x36>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <H_LCD_Void_LCDWriteCharacter+0x3c>
    1008:	00 00       	nop
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    100a:	8c 2f       	mov	r24, r28
    100c:	0e 94 cb 09 	call	0x1396	; 0x1396 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	87 e1       	ldi	r24, 0x17	; 23
    1014:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1018:	8f e9       	ldi	r24, 0x9F	; 159
    101a:	9f e0       	ldi	r25, 0x0F	; 15
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <H_LCD_Void_LCDWriteCharacter+0x50>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <H_LCD_Void_LCDWriteCharacter+0x56>
    1022:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	87 e1       	ldi	r24, 0x17	; 23
    1028:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    102c:	8f e9       	ldi	r24, 0x9F	; 159
    102e:	9f e0       	ldi	r25, 0x0F	; 15
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <H_LCD_Void_LCDWriteCharacter+0x64>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <H_LCD_Void_LCDWriteCharacter+0x6a>
    1036:	00 00       	nop
#endif
	_delay_ms(1);
}
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDWriteCommand:

0000103c <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    103c:	cf 93       	push	r28
    103e:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	85 e1       	ldi	r24, 0x15	; 21
    1044:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    1048:	8c 2f       	mov	r24, r28
    104a:	82 95       	swap	r24
    104c:	8f 70       	andi	r24, 0x0F	; 15
    104e:	0e 94 cb 09 	call	0x1396	; 0x1396 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	87 e1       	ldi	r24, 0x17	; 23
    1056:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    105a:	8f e9       	ldi	r24, 0x9F	; 159
    105c:	9f e0       	ldi	r25, 0x0F	; 15
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <H_LCD_Void_LCDWriteCommand+0x22>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <H_LCD_Void_LCDWriteCommand+0x28>
    1064:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	87 e1       	ldi	r24, 0x17	; 23
    106a:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    106e:	8f e9       	ldi	r24, 0x9F	; 159
    1070:	9f e0       	ldi	r25, 0x0F	; 15
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <H_LCD_Void_LCDWriteCommand+0x36>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <H_LCD_Void_LCDWriteCommand+0x3c>
    1078:	00 00       	nop
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    107a:	8c 2f       	mov	r24, r28
    107c:	0e 94 cb 09 	call	0x1396	; 0x1396 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	87 e1       	ldi	r24, 0x17	; 23
    1084:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1088:	8f e9       	ldi	r24, 0x9F	; 159
    108a:	9f e0       	ldi	r25, 0x0F	; 15
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <H_LCD_Void_LCDWriteCommand+0x50>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <H_LCD_Void_LCDWriteCommand+0x56>
    1092:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	87 e1       	ldi	r24, 0x17	; 23
    1098:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    109c:	8f e9       	ldi	r24, 0x9F	; 159
    109e:	9f e0       	ldi	r25, 0x0F	; 15
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <H_LCD_Void_LCDWriteCommand+0x64>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <H_LCD_Void_LCDWriteCommand+0x6a>
    10a6:	00 00       	nop
#endif
	_delay_ms(1);
}
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDInit:

000010ac <H_LCD_Void_LCDInit>:
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	8e e0       	ldi	r24, 0x0E	; 14
    10b0:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	8f e0       	ldi	r24, 0x0F	; 15
    10b8:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	80 e1       	ldi	r24, 0x10	; 16
    10c0:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	81 e1       	ldi	r24, 0x11	; 17
    10c8:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	85 e1       	ldi	r24, 0x15	; 21
    10d0:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	87 e1       	ldi	r24, 0x17	; 23
    10d8:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	86 e1       	ldi	r24, 0x16	; 22
    10e0:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	86 e1       	ldi	r24, 0x16	; 22
    10e8:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    10ec:	83 e3       	ldi	r24, 0x33	; 51
    10ee:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    10f2:	82 e3       	ldi	r24, 0x32	; 50
    10f4:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    10f8:	88 e2       	ldi	r24, 0x28	; 40
    10fa:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    10fe:	8c e0       	ldi	r24, 0x0C	; 12
    1100:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
    1110:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDWriteString:

0000148e <H_LCD_Void_LCDWriteString>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	8c 01       	movw	r16, r24
	u8 Local_U8_Counter = 0;
    1496:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <H_LCD_Void_LCDWriteString+0x12>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    149a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    149e:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    14a0:	f8 01       	movw	r30, r16
    14a2:	ec 0f       	add	r30, r28
    14a4:	f1 1d       	adc	r31, r1
    14a6:	80 81       	ld	r24, Z
    14a8:	81 11       	cpse	r24, r1
    14aa:	f7 cf       	rjmp	.-18     	; 0x149a <H_LCD_Void_LCDWriteString+0xc>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDWriteNumber:

00000cf2 <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
 cf2:	cf 92       	push	r12
 cf4:	df 92       	push	r13
 cf6:	ef 92       	push	r14
 cf8:	ff 92       	push	r15
 cfa:	1f 93       	push	r17
 cfc:	cf 93       	push	r28
 cfe:	df 93       	push	r29
 d00:	cd b7       	in	r28, 0x3d	; 61
 d02:	de b7       	in	r29, 0x3e	; 62
 d04:	60 97       	sbiw	r28, 0x10	; 16
 d06:	0f b6       	in	r0, 0x3f	; 63
 d08:	f8 94       	cli
 d0a:	de bf       	out	0x3e, r29	; 62
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	cd bf       	out	0x3d, r28	; 61
 d10:	6b 01       	movw	r12, r22
 d12:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
 d14:	99 23       	and	r25, r25
 d16:	5c f4       	brge	.+22     	; 0xd2e <H_LCD_Void_LCDWriteNumber+0x3c>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
 d18:	f0 94       	com	r15
 d1a:	e0 94       	com	r14
 d1c:	d0 94       	com	r13
 d1e:	c0 94       	com	r12
 d20:	c1 1c       	adc	r12, r1
 d22:	d1 1c       	adc	r13, r1
 d24:	e1 1c       	adc	r14, r1
 d26:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
 d28:	8d e2       	ldi	r24, 0x2D	; 45
 d2a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
 d2e:	1f ef       	ldi	r17, 0xFF	; 255
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
 d30:	1f 5f       	subi	r17, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
 d32:	c7 01       	movw	r24, r14
 d34:	b6 01       	movw	r22, r12
 d36:	2a e0       	ldi	r18, 0x0A	; 10
 d38:	30 e0       	ldi	r19, 0x00	; 0
 d3a:	40 e0       	ldi	r20, 0x00	; 0
 d3c:	50 e0       	ldi	r21, 0x00	; 0
 d3e:	0e 94 30 0a 	call	0x1460	; 0x1460 <__divmodsi4>
 d42:	e1 e0       	ldi	r30, 0x01	; 1
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	ec 0f       	add	r30, r28
 d48:	fd 1f       	adc	r31, r29
 d4a:	e1 0f       	add	r30, r17
 d4c:	f1 1d       	adc	r31, r1
 d4e:	17 fd       	sbrc	r17, 7
 d50:	fa 95       	dec	r31
 d52:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
 d54:	c2 2e       	mov	r12, r18
 d56:	d3 2e       	mov	r13, r19
 d58:	e4 2e       	mov	r14, r20
 d5a:	f5 2e       	mov	r15, r21
	}while(Copy_S32_Num != 0);
 d5c:	c1 14       	cp	r12, r1
 d5e:	d1 04       	cpc	r13, r1
 d60:	e1 04       	cpc	r14, r1
 d62:	f1 04       	cpc	r15, r1
 d64:	29 f7       	brne	.-54     	; 0xd30 <H_LCD_Void_LCDWriteNumber+0x3e>
 d66:	0d c0       	rjmp	.+26     	; 0xd82 <H_LCD_Void_LCDWriteNumber+0x90>
	while(Local_S8_Counter >= 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
 d68:	e1 e0       	ldi	r30, 0x01	; 1
 d6a:	f0 e0       	ldi	r31, 0x00	; 0
 d6c:	ec 0f       	add	r30, r28
 d6e:	fd 1f       	adc	r31, r29
 d70:	e1 0f       	add	r30, r17
 d72:	f1 1d       	adc	r31, r1
 d74:	17 fd       	sbrc	r17, 7
 d76:	fa 95       	dec	r31
 d78:	80 81       	ld	r24, Z
 d7a:	80 5d       	subi	r24, 0xD0	; 208
 d7c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
 d80:	11 50       	subi	r17, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
 d82:	11 23       	and	r17, r17
 d84:	8c f7       	brge	.-30     	; 0xd68 <H_LCD_Void_LCDWriteNumber+0x76>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
}
 d86:	60 96       	adiw	r28, 0x10	; 16
 d88:	0f b6       	in	r0, 0x3f	; 63
 d8a:	f8 94       	cli
 d8c:	de bf       	out	0x3e, r29	; 62
 d8e:	0f be       	out	0x3f, r0	; 63
 d90:	cd bf       	out	0x3d, r28	; 61
 d92:	df 91       	pop	r29
 d94:	cf 91       	pop	r28
 d96:	1f 91       	pop	r17
 d98:	ff 90       	pop	r15
 d9a:	ef 90       	pop	r14
 d9c:	df 90       	pop	r13
 d9e:	cf 90       	pop	r12
 da0:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDWriteFloat:

0000073c <H_LCD_Void_LCDWriteFloat>:

void H_LCD_Void_LCDWriteFloat(f32 Copy_F32_Num)
{
 73c:	9f 92       	push	r9
 73e:	af 92       	push	r10
 740:	bf 92       	push	r11
 742:	cf 92       	push	r12
 744:	df 92       	push	r13
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	60 97       	sbiw	r28, 0x10	; 16
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	f8 94       	cli
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	0f be       	out	0x3f, r0	; 63
 760:	cd bf       	out	0x3d, r28	; 61
 762:	6b 01       	movw	r12, r22
 764:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	u32 Local_U32_Num = Copy_F32_Num;
 766:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
 76a:	96 2e       	mov	r9, r22
 76c:	a7 2e       	mov	r10, r23
 76e:	b8 2e       	mov	r11, r24
 770:	09 2f       	mov	r16, r25
	}
}

void H_LCD_Void_LCDWriteFloat(f32 Copy_F32_Num)
{
	s8 Local_S8_Counter = -1;
 772:	1f ef       	ldi	r17, 0xFF	; 255
	u8 Local_U8_Arr[16];
	u32 Local_U32_Num = Copy_F32_Num;

	do
	{
		Local_S8_Counter++;
 774:	1f 5f       	subi	r17, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Local_U32_Num % 10;
 776:	2a e0       	ldi	r18, 0x0A	; 10
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	50 e0       	ldi	r21, 0x00	; 0
 77e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
 782:	e1 e0       	ldi	r30, 0x01	; 1
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	ec 0f       	add	r30, r28
 788:	fd 1f       	adc	r31, r29
 78a:	e1 0f       	add	r30, r17
 78c:	f1 1d       	adc	r31, r1
 78e:	17 fd       	sbrc	r17, 7
 790:	fa 95       	dec	r31
 792:	60 83       	st	Z, r22
		Local_U32_Num = Local_U32_Num / 10;
 794:	62 2f       	mov	r22, r18
 796:	73 2f       	mov	r23, r19
 798:	84 2f       	mov	r24, r20
 79a:	95 2f       	mov	r25, r21
	}while(Local_U32_Num != 0);
 79c:	61 15       	cp	r22, r1
 79e:	71 05       	cpc	r23, r1
 7a0:	81 05       	cpc	r24, r1
 7a2:	91 05       	cpc	r25, r1
 7a4:	39 f7       	brne	.-50     	; 0x774 <H_LCD_Void_LCDWriteFloat+0x38>
 7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <H_LCD_Void_LCDWriteFloat+0x86>
	while(Local_S8_Counter >= 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
 7a8:	e1 e0       	ldi	r30, 0x01	; 1
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	ec 0f       	add	r30, r28
 7ae:	fd 1f       	adc	r31, r29
 7b0:	e1 0f       	add	r30, r17
 7b2:	f1 1d       	adc	r31, r1
 7b4:	17 fd       	sbrc	r17, 7
 7b6:	fa 95       	dec	r31
 7b8:	80 81       	ld	r24, Z
 7ba:	80 5d       	subi	r24, 0xD0	; 208
 7bc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
 7c0:	11 50       	subi	r17, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Local_U32_Num % 10;
		Local_U32_Num = Local_U32_Num / 10;
	}while(Local_U32_Num != 0);
	while(Local_S8_Counter >= 0)
 7c2:	11 23       	and	r17, r17
 7c4:	8c f7       	brge	.-30     	; 0x7a8 <H_LCD_Void_LCDWriteFloat+0x6c>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
		H_LCD_Void_LCDWriteCharacter(46);
 7c6:	8e e2       	ldi	r24, 0x2E	; 46
 7c8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <H_LCD_Void_LCDWriteCharacter>
		H_LCD_Void_LCDWriteNumber((f32)(Copy_F32_Num-(u32)Copy_F32_Num)*1000);
 7cc:	69 2d       	mov	r22, r9
 7ce:	7a 2d       	mov	r23, r10
 7d0:	8b 2d       	mov	r24, r11
 7d2:	90 2f       	mov	r25, r16
 7d4:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
 7d8:	9b 01       	movw	r18, r22
 7da:	ac 01       	movw	r20, r24
 7dc:	c7 01       	movw	r24, r14
 7de:	b6 01       	movw	r22, r12
 7e0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__subsf3>
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	4a e7       	ldi	r20, 0x7A	; 122
 7ea:	54 e4       	ldi	r21, 0x44	; 68
 7ec:	0e 94 ed 0a 	call	0x15da	; 0x15da <__mulsf3>
 7f0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fixsfsi>
 7f4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <H_LCD_Void_LCDWriteNumber>
}
 7f8:	60 96       	adiw	r28, 0x10	; 16
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	ff 90       	pop	r15
 80e:	ef 90       	pop	r14
 810:	df 90       	pop	r13
 812:	cf 90       	pop	r12
 814:	bf 90       	pop	r11
 816:	af 90       	pop	r10
 818:	9f 90       	pop	r9
 81a:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDGoTo:

00001430 <H_LCD_Void_LCDGoTo>:

void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	00 d0       	rcall	.+0      	; 0x1436 <H_LCD_Void_LCDGoTo+0x6>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    143a:	90 e8       	ldi	r25, 0x80	; 128
    143c:	99 83       	std	Y+1, r25	; 0x01
    143e:	90 ec       	ldi	r25, 0xC0	; 192
    1440:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    1442:	e1 e0       	ldi	r30, 0x01	; 1
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ec 0f       	add	r30, r28
    1448:	fd 1f       	adc	r31, r29
    144a:	e8 0f       	add	r30, r24
    144c:	f1 1d       	adc	r31, r1
    144e:	80 81       	ld	r24, Z
    1450:	86 0f       	add	r24, r22
    1452:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

Disassembly of section .text.H_LCD_Void_LCDClear:

000015c2 <H_LCD_Void_LCDClear>:

void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 1e 08 	call	0x103c	; 0x103c <H_LCD_Void_LCDWriteCommand>
    15c8:	08 95       	ret

Disassembly of section .text.H_LED_Void_LedInit:

00001170 <H_LED_Void_LedInit>:
#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	b1 f0       	breq	.+44     	; 0x11a0 <H_LED_Void_LedInit+0x30>
    1174:	28 f4       	brcc	.+10     	; 0x1180 <H_LED_Void_LedInit+0x10>
    1176:	88 23       	and	r24, r24
    1178:	49 f0       	breq	.+18     	; 0x118c <H_LED_Void_LedInit+0x1c>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	61 f0       	breq	.+24     	; 0x1196 <H_LED_Void_LedInit+0x26>
    117e:	08 95       	ret
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	c1 f0       	breq	.+48     	; 0x11b4 <H_LED_Void_LedInit+0x44>
    1184:	90 f0       	brcs	.+36     	; 0x11aa <H_LED_Void_LedInit+0x3a>
    1186:	85 30       	cpi	r24, 0x05	; 5
    1188:	d1 f0       	breq	.+52     	; 0x11be <H_LED_Void_LedInit+0x4e>
    118a:	08 95       	ret
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	80 e2       	ldi	r24, 0x20	; 32
    1190:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    1194:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	85 e2       	ldi	r24, 0x25	; 37
    119a:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    119e:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	8b e2       	ldi	r24, 0x2B	; 43
    11a4:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    11a8:	08 95       	ret
	case LED3: M_DIO_Void_SetPinDirection(LED3_PIN,OUTPUT); break;
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	8a e2       	ldi	r24, 0x2A	; 42
    11ae:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    11b2:	08 95       	ret
	case LED4: M_DIO_Void_SetPinDirection(LED4_PIN,OUTPUT); break;
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	8e e2       	ldi	r24, 0x2E	; 46
    11b8:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    11bc:	08 95       	ret
	case LED5: M_DIO_Void_SetPinDirection(LED5_PIN,OUTPUT); break;
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	84 e1       	ldi	r24, 0x14	; 20
    11c2:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    11c6:	08 95       	ret

Disassembly of section .text.H_LED_Void_LedSetOn:

000011c8 <H_LED_Void_LedSetOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	b1 f0       	breq	.+44     	; 0x11f8 <H_LED_Void_LedSetOn+0x30>
    11cc:	28 f4       	brcc	.+10     	; 0x11d8 <H_LED_Void_LedSetOn+0x10>
    11ce:	88 23       	and	r24, r24
    11d0:	49 f0       	breq	.+18     	; 0x11e4 <H_LED_Void_LedSetOn+0x1c>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	61 f0       	breq	.+24     	; 0x11ee <H_LED_Void_LedSetOn+0x26>
    11d6:	08 95       	ret
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	c1 f0       	breq	.+48     	; 0x120c <H_LED_Void_LedSetOn+0x44>
    11dc:	90 f0       	brcs	.+36     	; 0x1202 <H_LED_Void_LedSetOn+0x3a>
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	d1 f0       	breq	.+52     	; 0x1216 <H_LED_Void_LedSetOn+0x4e>
    11e2:	08 95       	ret
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	80 e2       	ldi	r24, 0x20	; 32
    11e8:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    11ec:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	85 e2       	ldi	r24, 0x25	; 37
    11f2:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    11f6:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	8b e2       	ldi	r24, 0x2B	; 43
    11fc:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1200:	08 95       	ret
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,HIGH); break;
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	8a e2       	ldi	r24, 0x2A	; 42
    1206:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    120a:	08 95       	ret
	case LED4: M_DIO_Void_SetPinValue(LED4_PIN,HIGH); break;
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	8e e2       	ldi	r24, 0x2E	; 46
    1210:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1214:	08 95       	ret
	case LED5: M_DIO_Void_SetPinValue(LED5_PIN,HIGH); break;
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    121e:	08 95       	ret

Disassembly of section .text.H_LED_Void_LedSetOff:

00001220 <H_LED_Void_LedSetOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	b1 f0       	breq	.+44     	; 0x1250 <H_LED_Void_LedSetOff+0x30>
    1224:	28 f4       	brcc	.+10     	; 0x1230 <H_LED_Void_LedSetOff+0x10>
    1226:	88 23       	and	r24, r24
    1228:	49 f0       	breq	.+18     	; 0x123c <H_LED_Void_LedSetOff+0x1c>
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	61 f0       	breq	.+24     	; 0x1246 <H_LED_Void_LedSetOff+0x26>
    122e:	08 95       	ret
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	c1 f0       	breq	.+48     	; 0x1264 <H_LED_Void_LedSetOff+0x44>
    1234:	90 f0       	brcs	.+36     	; 0x125a <H_LED_Void_LedSetOff+0x3a>
    1236:	85 30       	cpi	r24, 0x05	; 5
    1238:	d1 f0       	breq	.+52     	; 0x126e <H_LED_Void_LedSetOff+0x4e>
    123a:	08 95       	ret
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1244:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	85 e2       	ldi	r24, 0x25	; 37
    124a:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    124e:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	8b e2       	ldi	r24, 0x2B	; 43
    1254:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1258:	08 95       	ret
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,LOW); break;
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	8a e2       	ldi	r24, 0x2A	; 42
    125e:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1262:	08 95       	ret
	case LED4: M_DIO_Void_SetPinValue(LED4_PIN,LOW); break;
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	8e e2       	ldi	r24, 0x2E	; 46
    1268:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    126c:	08 95       	ret
	case LED5: M_DIO_Void_SetPinValue(LED5_PIN,LOW); break;
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	84 e1       	ldi	r24, 0x14	; 20
    1272:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_Void_SetPinValue>
    1276:	08 95       	ret

Disassembly of section .text.M_ADC_Void_ADCInit:

000013cc <M_ADC_Void_ADCInit>:


void M_ADC_Void_ADCInit(void)
{
#if   ADC_V_REF_MODE   ==   AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    13cc:	87 b1       	in	r24, 0x07	; 7
    13ce:	8f 77       	andi	r24, 0x7F	; 127
    13d0:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX_REG,REFS0_BIT);
    13d2:	87 b1       	in	r24, 0x07	; 7
    13d4:	80 64       	ori	r24, 0x40	; 64
    13d6:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX_REG,REFS1_BIT);
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif

	/* TO SELECT RIGHT ADDJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    13d8:	87 b1       	in	r24, 0x07	; 7
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	87 b9       	out	0x07, r24	; 7

#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    13de:	86 b1       	in	r24, 0x06	; 6
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    13e4:	86 b1       	in	r24, 0x06	; 6
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    13ea:	86 b1       	in	r24, 0x06	; 6
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
    13f0:	86 b1       	in	r24, 0x06	; 6
    13f2:	80 62       	ori	r24, 0x20	; 32
    13f4:	86 b9       	out	0x06, r24	; 6
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    13f6:	86 b1       	in	r24, 0x06	; 6
    13f8:	80 68       	ori	r24, 0x80	; 128
    13fa:	86 b9       	out	0x06, r24	; 6
    13fc:	08 95       	ret

Disassembly of section .text.M_ADC_U16_ADCRead:

00000c36 <M_ADC_U16_ADCRead>:
}
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	switch(Copy_U8_AdcChannel)
 c36:	81 30       	cpi	r24, 0x01	; 1
 c38:	b1 f0       	breq	.+44     	; 0xc66 <M_ADC_U16_ADCRead+0x30>
 c3a:	28 f0       	brcs	.+10     	; 0xc46 <M_ADC_U16_ADCRead+0x10>
 c3c:	82 30       	cpi	r24, 0x02	; 2
 c3e:	19 f1       	breq	.+70     	; 0xc86 <M_ADC_U16_ADCRead+0x50>
 c40:	83 30       	cpi	r24, 0x03	; 3
 c42:	89 f1       	breq	.+98     	; 0xca6 <M_ADC_U16_ADCRead+0x70>
 c44:	3f c0       	rjmp	.+126    	; 0xcc4 <M_ADC_U16_ADCRead+0x8e>
	{
	case ADC_CHANNEL_0:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
 c46:	87 b1       	in	r24, 0x07	; 7
 c48:	8f 7e       	andi	r24, 0xEF	; 239
 c4a:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX3_BIT);
 c4c:	87 b1       	in	r24, 0x07	; 7
 c4e:	87 7f       	andi	r24, 0xF7	; 247
 c50:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX2_BIT);
 c52:	87 b1       	in	r24, 0x07	; 7
 c54:	8b 7f       	andi	r24, 0xFB	; 251
 c56:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX1_BIT);
 c58:	87 b1       	in	r24, 0x07	; 7
 c5a:	8d 7f       	andi	r24, 0xFD	; 253
 c5c:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX0_BIT);
 c5e:	87 b1       	in	r24, 0x07	; 7
 c60:	8e 7f       	andi	r24, 0xFE	; 254
 c62:	87 b9       	out	0x07, r24	; 7
		break;
 c64:	2f c0       	rjmp	.+94     	; 0xcc4 <M_ADC_U16_ADCRead+0x8e>
	case ADC_CHANNEL_1:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
 c66:	87 b1       	in	r24, 0x07	; 7
 c68:	8f 7e       	andi	r24, 0xEF	; 239
 c6a:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX3_BIT);
 c6c:	87 b1       	in	r24, 0x07	; 7
 c6e:	87 7f       	andi	r24, 0xF7	; 247
 c70:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX2_BIT);
 c72:	87 b1       	in	r24, 0x07	; 7
 c74:	8b 7f       	andi	r24, 0xFB	; 251
 c76:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX1_BIT);
 c78:	87 b1       	in	r24, 0x07	; 7
 c7a:	8d 7f       	andi	r24, 0xFD	; 253
 c7c:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,MUX0_BIT);
 c7e:	87 b1       	in	r24, 0x07	; 7
 c80:	81 60       	ori	r24, 0x01	; 1
 c82:	87 b9       	out	0x07, r24	; 7
		break;
 c84:	1f c0       	rjmp	.+62     	; 0xcc4 <M_ADC_U16_ADCRead+0x8e>
	case ADC_CHANNEL_2:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
 c86:	87 b1       	in	r24, 0x07	; 7
 c88:	8f 7e       	andi	r24, 0xEF	; 239
 c8a:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX3_BIT);
 c8c:	87 b1       	in	r24, 0x07	; 7
 c8e:	87 7f       	andi	r24, 0xF7	; 247
 c90:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX2_BIT);
 c92:	87 b1       	in	r24, 0x07	; 7
 c94:	8b 7f       	andi	r24, 0xFB	; 251
 c96:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,MUX1_BIT);
 c98:	87 b1       	in	r24, 0x07	; 7
 c9a:	82 60       	ori	r24, 0x02	; 2
 c9c:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX0_BIT);
 c9e:	87 b1       	in	r24, 0x07	; 7
 ca0:	8e 7f       	andi	r24, 0xFE	; 254
 ca2:	87 b9       	out	0x07, r24	; 7
		break;
 ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <M_ADC_U16_ADCRead+0x8e>
	case ADC_CHANNEL_3:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
 ca6:	87 b1       	in	r24, 0x07	; 7
 ca8:	8f 7e       	andi	r24, 0xEF	; 239
 caa:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX3_BIT);
 cac:	87 b1       	in	r24, 0x07	; 7
 cae:	87 7f       	andi	r24, 0xF7	; 247
 cb0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,MUX2_BIT);
 cb2:	87 b1       	in	r24, 0x07	; 7
 cb4:	8b 7f       	andi	r24, 0xFB	; 251
 cb6:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,MUX1_BIT);
 cb8:	87 b1       	in	r24, 0x07	; 7
 cba:	82 60       	ori	r24, 0x02	; 2
 cbc:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,MUX0_BIT);
 cbe:	87 b1       	in	r24, 0x07	; 7
 cc0:	81 60       	ori	r24, 0x01	; 1
 cc2:	87 b9       	out	0x07, r24	; 7
		break;
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
 cc4:	86 b1       	in	r24, 0x06	; 6
 cc6:	80 64       	ori	r24, 0x40	; 64
 cc8:	86 b9       	out	0x06, r24	; 6
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
}
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	dc 01       	movw	r26, r24
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
 cd0:	05 c0       	rjmp	.+10     	; 0xcdc <M_ADC_U16_ADCRead+0xa6>
	{
		Local_U32_Counter++;
 cd2:	01 96       	adiw	r24, 0x01	; 1
 cd4:	a1 1d       	adc	r26, r1
 cd6:	b1 1d       	adc	r27, r1
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
 cd8:	34 99       	sbic	0x06, 4	; 6
 cda:	08 c0       	rjmp	.+16     	; 0xcec <M_ADC_U16_ADCRead+0xb6>
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
 cdc:	81 15       	cp	r24, r1
 cde:	2d e2       	ldi	r18, 0x2D	; 45
 ce0:	92 07       	cpc	r25, r18
 ce2:	21 e3       	ldi	r18, 0x31	; 49
 ce4:	a2 07       	cpc	r26, r18
 ce6:	21 e0       	ldi	r18, 0x01	; 1
 ce8:	b2 07       	cpc	r27, r18
 cea:	98 f3       	brcs	.-26     	; 0xcd2 <M_ADC_U16_ADCRead+0x9c>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCL_REG;
 cec:	84 b1       	in	r24, 0x04	; 4
 cee:	95 b1       	in	r25, 0x05	; 5
}
 cf0:	08 95       	ret

Disassembly of section .text.M_DIO_Void_SetPinDirection:

00000406 <M_DIO_Void_SetPinDirection>:
	switch(Local_U8_Port)
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
 406:	9d ec       	ldi	r25, 0xCD	; 205
 408:	89 9f       	mul	r24, r25
 40a:	91 2d       	mov	r25, r1
 40c:	11 24       	eor	r1, r1
 40e:	29 2f       	mov	r18, r25
 410:	26 95       	lsr	r18
 412:	26 95       	lsr	r18
 414:	26 95       	lsr	r18
 416:	22 0f       	add	r18, r18
 418:	32 2f       	mov	r19, r18
 41a:	33 0f       	add	r19, r19
 41c:	33 0f       	add	r19, r19
 41e:	23 0f       	add	r18, r19
 420:	82 1b       	sub	r24, r18
 422:	28 2f       	mov	r18, r24
 424:	96 95       	lsr	r25
 426:	96 95       	lsr	r25
 428:	96 95       	lsr	r25
 42a:	66 23       	and	r22, r22
 42c:	19 f0       	breq	.+6      	; 0x434 <M_DIO_Void_SetPinDirection+0x2e>
 42e:	61 30       	cpi	r22, 0x01	; 1
 430:	e1 f1       	breq	.+120    	; 0x4aa <M_DIO_Void_SetPinDirection+0xa4>
 432:	08 95       	ret
 434:	92 30       	cpi	r25, 0x02	; 2
 436:	a9 f0       	breq	.+42     	; 0x462 <M_DIO_Void_SetPinDirection+0x5c>
 438:	18 f4       	brcc	.+6      	; 0x440 <M_DIO_Void_SetPinDirection+0x3a>
 43a:	91 30       	cpi	r25, 0x01	; 1
 43c:	31 f0       	breq	.+12     	; 0x44a <M_DIO_Void_SetPinDirection+0x44>
 43e:	08 95       	ret
 440:	93 30       	cpi	r25, 0x03	; 3
 442:	d9 f0       	breq	.+54     	; 0x47a <M_DIO_Void_SetPinDirection+0x74>
 444:	94 30       	cpi	r25, 0x04	; 4
 446:	29 f1       	breq	.+74     	; 0x492 <M_DIO_Void_SetPinDirection+0x8c>
 448:	08 95       	ret
 44a:	3a b3       	in	r19, 0x1a	; 26
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <M_DIO_Void_SetPinDirection+0x50>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	2a 95       	dec	r18
 458:	e2 f7       	brpl	.-8      	; 0x452 <M_DIO_Void_SetPinDirection+0x4c>
 45a:	80 95       	com	r24
 45c:	83 23       	and	r24, r19
 45e:	8a bb       	out	0x1a, r24	; 26
 460:	08 95       	ret
 462:	37 b3       	in	r19, 0x17	; 23
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <M_DIO_Void_SetPinDirection+0x68>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	2a 95       	dec	r18
 470:	e2 f7       	brpl	.-8      	; 0x46a <M_DIO_Void_SetPinDirection+0x64>
 472:	80 95       	com	r24
 474:	83 23       	and	r24, r19
 476:	87 bb       	out	0x17, r24	; 23
 478:	08 95       	ret
 47a:	34 b3       	in	r19, 0x14	; 20
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <M_DIO_Void_SetPinDirection+0x80>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	2a 95       	dec	r18
 488:	e2 f7       	brpl	.-8      	; 0x482 <M_DIO_Void_SetPinDirection+0x7c>
 48a:	80 95       	com	r24
 48c:	83 23       	and	r24, r19
 48e:	84 bb       	out	0x14, r24	; 20
 490:	08 95       	ret
 492:	31 b3       	in	r19, 0x11	; 17
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <M_DIO_Void_SetPinDirection+0x98>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <M_DIO_Void_SetPinDirection+0x94>
 4a2:	80 95       	com	r24
 4a4:	83 23       	and	r24, r19
 4a6:	81 bb       	out	0x11, r24	; 17
 4a8:	08 95       	ret
 4aa:	92 30       	cpi	r25, 0x02	; 2
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <M_DIO_Void_SetPinDirection+0xd0>
 4ae:	18 f4       	brcc	.+6      	; 0x4b6 <M_DIO_Void_SetPinDirection+0xb0>
 4b0:	91 30       	cpi	r25, 0x01	; 1
 4b2:	31 f0       	breq	.+12     	; 0x4c0 <M_DIO_Void_SetPinDirection+0xba>
 4b4:	08 95       	ret
 4b6:	93 30       	cpi	r25, 0x03	; 3
 4b8:	c9 f0       	breq	.+50     	; 0x4ec <M_DIO_Void_SetPinDirection+0xe6>
 4ba:	94 30       	cpi	r25, 0x04	; 4
 4bc:	11 f1       	breq	.+68     	; 0x502 <M_DIO_Void_SetPinDirection+0xfc>
 4be:	08 95       	ret
 4c0:	3a b3       	in	r19, 0x1a	; 26
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <M_DIO_Void_SetPinDirection+0xc6>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	2a 95       	dec	r18
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <M_DIO_Void_SetPinDirection+0xc2>
 4d0:	83 2b       	or	r24, r19
 4d2:	8a bb       	out	0x1a, r24	; 26
 4d4:	08 95       	ret
 4d6:	37 b3       	in	r19, 0x17	; 23
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <M_DIO_Void_SetPinDirection+0xdc>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	2a 95       	dec	r18
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <M_DIO_Void_SetPinDirection+0xd8>
 4e6:	83 2b       	or	r24, r19
 4e8:	87 bb       	out	0x17, r24	; 23
 4ea:	08 95       	ret
 4ec:	34 b3       	in	r19, 0x14	; 20
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <M_DIO_Void_SetPinDirection+0xf2>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <M_DIO_Void_SetPinDirection+0xee>
 4fc:	83 2b       	or	r24, r19
 4fe:	84 bb       	out	0x14, r24	; 20
 500:	08 95       	ret
 502:	31 b3       	in	r19, 0x11	; 17
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <M_DIO_Void_SetPinDirection+0x108>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	2a 95       	dec	r18
 510:	e2 f7       	brpl	.-8      	; 0x50a <M_DIO_Void_SetPinDirection+0x104>
 512:	83 2b       	or	r24, r19
 514:	81 bb       	out	0x11, r24	; 17
 516:	08 95       	ret

Disassembly of section .text.M_DIO_Void_SetPinValue:

00000518 <M_DIO_Void_SetPinValue>:
 518:	9d ec       	ldi	r25, 0xCD	; 205
 51a:	89 9f       	mul	r24, r25
 51c:	91 2d       	mov	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	29 2f       	mov	r18, r25
 522:	26 95       	lsr	r18
 524:	26 95       	lsr	r18
 526:	26 95       	lsr	r18
 528:	22 0f       	add	r18, r18
 52a:	32 2f       	mov	r19, r18
 52c:	33 0f       	add	r19, r19
 52e:	33 0f       	add	r19, r19
 530:	23 0f       	add	r18, r19
 532:	82 1b       	sub	r24, r18
 534:	28 2f       	mov	r18, r24
 536:	96 95       	lsr	r25
 538:	96 95       	lsr	r25
 53a:	96 95       	lsr	r25
 53c:	66 23       	and	r22, r22
 53e:	19 f0       	breq	.+6      	; 0x546 <M_DIO_Void_SetPinValue+0x2e>
 540:	61 30       	cpi	r22, 0x01	; 1
 542:	e1 f1       	breq	.+120    	; 0x5bc <M_DIO_Void_SetPinValue+0xa4>
 544:	08 95       	ret
 546:	92 30       	cpi	r25, 0x02	; 2
 548:	a9 f0       	breq	.+42     	; 0x574 <M_DIO_Void_SetPinValue+0x5c>
 54a:	18 f4       	brcc	.+6      	; 0x552 <M_DIO_Void_SetPinValue+0x3a>
 54c:	91 30       	cpi	r25, 0x01	; 1
 54e:	31 f0       	breq	.+12     	; 0x55c <M_DIO_Void_SetPinValue+0x44>
 550:	08 95       	ret
 552:	93 30       	cpi	r25, 0x03	; 3
 554:	d9 f0       	breq	.+54     	; 0x58c <M_DIO_Void_SetPinValue+0x74>
 556:	94 30       	cpi	r25, 0x04	; 4
 558:	29 f1       	breq	.+74     	; 0x5a4 <M_DIO_Void_SetPinValue+0x8c>
 55a:	08 95       	ret
 55c:	3b b3       	in	r19, 0x1b	; 27
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <M_DIO_Void_SetPinValue+0x50>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	2a 95       	dec	r18
 56a:	e2 f7       	brpl	.-8      	; 0x564 <M_DIO_Void_SetPinValue+0x4c>
 56c:	80 95       	com	r24
 56e:	83 23       	and	r24, r19
 570:	8b bb       	out	0x1b, r24	; 27
 572:	08 95       	ret
 574:	38 b3       	in	r19, 0x18	; 24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <M_DIO_Void_SetPinValue+0x68>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	2a 95       	dec	r18
 582:	e2 f7       	brpl	.-8      	; 0x57c <M_DIO_Void_SetPinValue+0x64>
 584:	80 95       	com	r24
 586:	83 23       	and	r24, r19
 588:	88 bb       	out	0x18, r24	; 24
 58a:	08 95       	ret
 58c:	35 b3       	in	r19, 0x15	; 21
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <M_DIO_Void_SetPinValue+0x80>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	2a 95       	dec	r18
 59a:	e2 f7       	brpl	.-8      	; 0x594 <M_DIO_Void_SetPinValue+0x7c>
 59c:	80 95       	com	r24
 59e:	83 23       	and	r24, r19
 5a0:	85 bb       	out	0x15, r24	; 21
 5a2:	08 95       	ret
 5a4:	32 b3       	in	r19, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <M_DIO_Void_SetPinValue+0x98>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	2a 95       	dec	r18
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <M_DIO_Void_SetPinValue+0x94>
 5b4:	80 95       	com	r24
 5b6:	83 23       	and	r24, r19
 5b8:	82 bb       	out	0x12, r24	; 18
 5ba:	08 95       	ret
 5bc:	92 30       	cpi	r25, 0x02	; 2
 5be:	a1 f0       	breq	.+40     	; 0x5e8 <M_DIO_Void_SetPinValue+0xd0>
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <M_DIO_Void_SetPinValue+0xb0>
 5c2:	91 30       	cpi	r25, 0x01	; 1
 5c4:	31 f0       	breq	.+12     	; 0x5d2 <M_DIO_Void_SetPinValue+0xba>
 5c6:	08 95       	ret
 5c8:	93 30       	cpi	r25, 0x03	; 3
 5ca:	c9 f0       	breq	.+50     	; 0x5fe <M_DIO_Void_SetPinValue+0xe6>
 5cc:	94 30       	cpi	r25, 0x04	; 4
 5ce:	11 f1       	breq	.+68     	; 0x614 <M_DIO_Void_SetPinValue+0xfc>
 5d0:	08 95       	ret
 5d2:	3b b3       	in	r19, 0x1b	; 27
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <M_DIO_Void_SetPinValue+0xc6>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <M_DIO_Void_SetPinValue+0xc2>
 5e2:	83 2b       	or	r24, r19
 5e4:	8b bb       	out	0x1b, r24	; 27
 5e6:	08 95       	ret
 5e8:	38 b3       	in	r19, 0x18	; 24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <M_DIO_Void_SetPinValue+0xdc>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	2a 95       	dec	r18
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <M_DIO_Void_SetPinValue+0xd8>
 5f8:	83 2b       	or	r24, r19
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	08 95       	ret
 5fe:	35 b3       	in	r19, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <M_DIO_Void_SetPinValue+0xf2>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	2a 95       	dec	r18
 60c:	e2 f7       	brpl	.-8      	; 0x606 <M_DIO_Void_SetPinValue+0xee>
 60e:	83 2b       	or	r24, r19
 610:	85 bb       	out	0x15, r24	; 21
 612:	08 95       	ret
 614:	32 b3       	in	r19, 0x12	; 18
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <M_DIO_Void_SetPinValue+0x108>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	2a 95       	dec	r18
 622:	e2 f7       	brpl	.-8      	; 0x61c <M_DIO_Void_SetPinValue+0x104>
 624:	83 2b       	or	r24, r19
 626:	82 bb       	out	0x12, r24	; 18
 628:	08 95       	ret

Disassembly of section .text.M_DIO_U8_GetPinValue:

00000e48 <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 e48:	9d ec       	ldi	r25, 0xCD	; 205
 e4a:	89 9f       	mul	r24, r25
 e4c:	91 2d       	mov	r25, r1
 e4e:	11 24       	eor	r1, r1
 e50:	29 2f       	mov	r18, r25
 e52:	26 95       	lsr	r18
 e54:	26 95       	lsr	r18
 e56:	26 95       	lsr	r18
 e58:	22 0f       	add	r18, r18
 e5a:	32 2f       	mov	r19, r18
 e5c:	33 0f       	add	r19, r19
 e5e:	33 0f       	add	r19, r19
 e60:	23 0f       	add	r18, r19
 e62:	82 1b       	sub	r24, r18
 e64:	28 2f       	mov	r18, r24
	u8 Local_U8_Port = Copy_U8_Num / 10;
 e66:	89 2f       	mov	r24, r25
 e68:	86 95       	lsr	r24
 e6a:	86 95       	lsr	r24
 e6c:	86 95       	lsr	r24
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
 e6e:	82 30       	cpi	r24, 0x02	; 2
 e70:	91 f0       	breq	.+36     	; 0xe96 <M_DIO_U8_GetPinValue+0x4e>
 e72:	18 f4       	brcc	.+6      	; 0xe7a <M_DIO_U8_GetPinValue+0x32>
 e74:	81 30       	cpi	r24, 0x01	; 1
 e76:	31 f0       	breq	.+12     	; 0xe84 <M_DIO_U8_GetPinValue+0x3c>
 e78:	29 c0       	rjmp	.+82     	; 0xecc <M_DIO_U8_GetPinValue+0x84>
 e7a:	83 30       	cpi	r24, 0x03	; 3
 e7c:	a9 f0       	breq	.+42     	; 0xea8 <M_DIO_U8_GetPinValue+0x60>
 e7e:	84 30       	cpi	r24, 0x04	; 4
 e80:	e1 f0       	breq	.+56     	; 0xeba <M_DIO_U8_GetPinValue+0x72>
 e82:	24 c0       	rjmp	.+72     	; 0xecc <M_DIO_U8_GetPinValue+0x84>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
 e84:	89 b3       	in	r24, 0x19	; 25
 e86:	90 e0       	ldi	r25, 0x00	; 0
 e88:	02 c0       	rjmp	.+4      	; 0xe8e <M_DIO_U8_GetPinValue+0x46>
 e8a:	95 95       	asr	r25
 e8c:	87 95       	ror	r24
 e8e:	2a 95       	dec	r18
 e90:	e2 f7       	brpl	.-8      	; 0xe8a <M_DIO_U8_GetPinValue+0x42>
 e92:	81 70       	andi	r24, 0x01	; 1
 e94:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
 e96:	86 b3       	in	r24, 0x16	; 22
 e98:	90 e0       	ldi	r25, 0x00	; 0
 e9a:	02 c0       	rjmp	.+4      	; 0xea0 <M_DIO_U8_GetPinValue+0x58>
 e9c:	95 95       	asr	r25
 e9e:	87 95       	ror	r24
 ea0:	2a 95       	dec	r18
 ea2:	e2 f7       	brpl	.-8      	; 0xe9c <M_DIO_U8_GetPinValue+0x54>
 ea4:	81 70       	andi	r24, 0x01	; 1
 ea6:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
 ea8:	83 b3       	in	r24, 0x13	; 19
 eaa:	90 e0       	ldi	r25, 0x00	; 0
 eac:	02 c0       	rjmp	.+4      	; 0xeb2 <M_DIO_U8_GetPinValue+0x6a>
 eae:	95 95       	asr	r25
 eb0:	87 95       	ror	r24
 eb2:	2a 95       	dec	r18
 eb4:	e2 f7       	brpl	.-8      	; 0xeae <M_DIO_U8_GetPinValue+0x66>
 eb6:	81 70       	andi	r24, 0x01	; 1
 eb8:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
 eba:	80 b3       	in	r24, 0x10	; 16
 ebc:	90 e0       	ldi	r25, 0x00	; 0
 ebe:	02 c0       	rjmp	.+4      	; 0xec4 <M_DIO_U8_GetPinValue+0x7c>
 ec0:	95 95       	asr	r25
 ec2:	87 95       	ror	r24
 ec4:	2a 95       	dec	r18
 ec6:	e2 f7       	brpl	.-8      	; 0xec0 <M_DIO_U8_GetPinValue+0x78>
 ec8:	81 70       	andi	r24, 0x01	; 1
 eca:	08 95       	ret
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
 ecc:	80 e0       	ldi	r24, 0x00	; 0
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
	default:                                                   break;
	}
	return Local_U8_Reading;
}
 ece:	08 95       	ret

Disassembly of section .text.M_DIO_Void_SetPinPullUpRes:

0000062a <M_DIO_Void_SetPinPullUpRes>:
	switch(Local_U8_Port)
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
 62a:	9d ec       	ldi	r25, 0xCD	; 205
 62c:	89 9f       	mul	r24, r25
 62e:	91 2d       	mov	r25, r1
 630:	11 24       	eor	r1, r1
 632:	29 2f       	mov	r18, r25
 634:	26 95       	lsr	r18
 636:	26 95       	lsr	r18
 638:	26 95       	lsr	r18
 63a:	22 0f       	add	r18, r18
 63c:	32 2f       	mov	r19, r18
 63e:	33 0f       	add	r19, r19
 640:	33 0f       	add	r19, r19
 642:	23 0f       	add	r18, r19
 644:	82 1b       	sub	r24, r18
 646:	28 2f       	mov	r18, r24
 648:	96 95       	lsr	r25
 64a:	96 95       	lsr	r25
 64c:	96 95       	lsr	r25
 64e:	66 23       	and	r22, r22
 650:	19 f0       	breq	.+6      	; 0x658 <M_DIO_Void_SetPinPullUpRes+0x2e>
 652:	61 30       	cpi	r22, 0x01	; 1
 654:	e1 f1       	breq	.+120    	; 0x6ce <M_DIO_Void_SetPinPullUpRes+0xa4>
 656:	08 95       	ret
 658:	92 30       	cpi	r25, 0x02	; 2
 65a:	a9 f0       	breq	.+42     	; 0x686 <M_DIO_Void_SetPinPullUpRes+0x5c>
 65c:	18 f4       	brcc	.+6      	; 0x664 <M_DIO_Void_SetPinPullUpRes+0x3a>
 65e:	91 30       	cpi	r25, 0x01	; 1
 660:	31 f0       	breq	.+12     	; 0x66e <M_DIO_Void_SetPinPullUpRes+0x44>
 662:	08 95       	ret
 664:	93 30       	cpi	r25, 0x03	; 3
 666:	d9 f0       	breq	.+54     	; 0x69e <M_DIO_Void_SetPinPullUpRes+0x74>
 668:	94 30       	cpi	r25, 0x04	; 4
 66a:	29 f1       	breq	.+74     	; 0x6b6 <M_DIO_Void_SetPinPullUpRes+0x8c>
 66c:	08 95       	ret
 66e:	3b b3       	in	r19, 0x1b	; 27
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <M_DIO_Void_SetPinPullUpRes+0x50>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <M_DIO_Void_SetPinPullUpRes+0x4c>
 67e:	80 95       	com	r24
 680:	83 23       	and	r24, r19
 682:	8b bb       	out	0x1b, r24	; 27
 684:	08 95       	ret
 686:	38 b3       	in	r19, 0x18	; 24
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <M_DIO_Void_SetPinPullUpRes+0x68>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <M_DIO_Void_SetPinPullUpRes+0x64>
 696:	80 95       	com	r24
 698:	83 23       	and	r24, r19
 69a:	88 bb       	out	0x18, r24	; 24
 69c:	08 95       	ret
 69e:	35 b3       	in	r19, 0x15	; 21
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <M_DIO_Void_SetPinPullUpRes+0x80>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	2a 95       	dec	r18
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <M_DIO_Void_SetPinPullUpRes+0x7c>
 6ae:	80 95       	com	r24
 6b0:	83 23       	and	r24, r19
 6b2:	85 bb       	out	0x15, r24	; 21
 6b4:	08 95       	ret
 6b6:	32 b3       	in	r19, 0x12	; 18
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <M_DIO_Void_SetPinPullUpRes+0x98>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	2a 95       	dec	r18
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <M_DIO_Void_SetPinPullUpRes+0x94>
 6c6:	80 95       	com	r24
 6c8:	83 23       	and	r24, r19
 6ca:	82 bb       	out	0x12, r24	; 18
 6cc:	08 95       	ret
 6ce:	92 30       	cpi	r25, 0x02	; 2
 6d0:	a1 f0       	breq	.+40     	; 0x6fa <M_DIO_Void_SetPinPullUpRes+0xd0>
 6d2:	18 f4       	brcc	.+6      	; 0x6da <M_DIO_Void_SetPinPullUpRes+0xb0>
 6d4:	91 30       	cpi	r25, 0x01	; 1
 6d6:	31 f0       	breq	.+12     	; 0x6e4 <M_DIO_Void_SetPinPullUpRes+0xba>
 6d8:	08 95       	ret
 6da:	93 30       	cpi	r25, 0x03	; 3
 6dc:	c9 f0       	breq	.+50     	; 0x710 <M_DIO_Void_SetPinPullUpRes+0xe6>
 6de:	94 30       	cpi	r25, 0x04	; 4
 6e0:	11 f1       	breq	.+68     	; 0x726 <M_DIO_Void_SetPinPullUpRes+0xfc>
 6e2:	08 95       	ret
 6e4:	3b b3       	in	r19, 0x1b	; 27
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <M_DIO_Void_SetPinPullUpRes+0xc6>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	2a 95       	dec	r18
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <M_DIO_Void_SetPinPullUpRes+0xc2>
 6f4:	83 2b       	or	r24, r19
 6f6:	8b bb       	out	0x1b, r24	; 27
 6f8:	08 95       	ret
 6fa:	38 b3       	in	r19, 0x18	; 24
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <M_DIO_Void_SetPinPullUpRes+0xdc>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	2a 95       	dec	r18
 708:	e2 f7       	brpl	.-8      	; 0x702 <M_DIO_Void_SetPinPullUpRes+0xd8>
 70a:	83 2b       	or	r24, r19
 70c:	88 bb       	out	0x18, r24	; 24
 70e:	08 95       	ret
 710:	35 b3       	in	r19, 0x15	; 21
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <M_DIO_Void_SetPinPullUpRes+0xf2>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	2a 95       	dec	r18
 71e:	e2 f7       	brpl	.-8      	; 0x718 <M_DIO_Void_SetPinPullUpRes+0xee>
 720:	83 2b       	or	r24, r19
 722:	85 bb       	out	0x15, r24	; 21
 724:	08 95       	ret
 726:	32 b3       	in	r19, 0x12	; 18
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <M_DIO_Void_SetPinPullUpRes+0x108>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	2a 95       	dec	r18
 734:	e2 f7       	brpl	.-8      	; 0x72e <M_DIO_Void_SetPinPullUpRes+0x104>
 736:	83 2b       	or	r24, r19
 738:	82 bb       	out	0x12, r24	; 18
 73a:	08 95       	ret

Disassembly of section .text.M_GIE_Void_GlobalInterruptEnable:

000015ca <M_GIE_Void_GlobalInterruptEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,I_BIT);
    15ca:	8f b7       	in	r24, 0x3f	; 63
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	8f bf       	out	0x3f, r24	; 63
    15d0:	08 95       	ret

Disassembly of section .text.__vector_11:

00000da2 <__vector_11>:
		break;
	}
}
#if TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
 da2:	1f 92       	push	r1
 da4:	0f 92       	push	r0
 da6:	0f b6       	in	r0, 0x3f	; 63
 da8:	0f 92       	push	r0
 daa:	11 24       	eor	r1, r1
 dac:	2f 93       	push	r18
 dae:	3f 93       	push	r19
 db0:	4f 93       	push	r20
 db2:	5f 93       	push	r21
 db4:	6f 93       	push	r22
 db6:	7f 93       	push	r23
 db8:	8f 93       	push	r24
 dba:	9f 93       	push	r25
 dbc:	af 93       	push	r26
 dbe:	bf 93       	push	r27
 dc0:	ef 93       	push	r30
 dc2:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
 dc4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Local_U32_Counter.1760>
 dc8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <Local_U32_Counter.1760+0x1>
 dcc:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <Local_U32_Counter.1760+0x2>
 dd0:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <Local_U32_Counter.1760+0x3>
 dd4:	01 96       	adiw	r24, 0x01	; 1
 dd6:	a1 1d       	adc	r26, r1
 dd8:	b1 1d       	adc	r27, r1
 dda:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Local_U32_Counter.1760>
 dde:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <Local_U32_Counter.1760+0x1>
 de2:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <Local_U32_Counter.1760+0x2>
 de6:	b0 93 82 00 	sts	0x0082, r27	; 0x800082 <Local_U32_Counter.1760+0x3>
	if(Local_U32_Counter == Timer_U32_NumOfOverFlows)
 dea:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <Timer_U32_NumOfOverFlows>
 dee:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <Timer_U32_NumOfOverFlows+0x1>
 df2:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <Timer_U32_NumOfOverFlows+0x2>
 df6:	70 91 86 00 	lds	r23, 0x0086	; 0x800086 <Timer_U32_NumOfOverFlows+0x3>
 dfa:	84 17       	cp	r24, r20
 dfc:	95 07       	cpc	r25, r21
 dfe:	a6 07       	cpc	r26, r22
 e00:	b7 07       	cpc	r27, r23
 e02:	89 f4       	brne	.+34     	; 0xe26 <__vector_11+0x84>
	{
		Timer0_CallBack();
 e04:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Timer0_CallBack>
 e08:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Timer0_CallBack+0x1>
 e0c:	09 95       	icall
		TCNT0_REG = 256 - Timer_U8_RemTicks;
 e0e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Timer_U8_RemTicks>
 e12:	81 95       	neg	r24
 e14:	82 bf       	out	0x32, r24	; 50
		Local_U32_Counter = 0;
 e16:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Local_U32_Counter.1760>
 e1a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Local_U32_Counter.1760+0x1>
 e1e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <Local_U32_Counter.1760+0x2>
 e22:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <Local_U32_Counter.1760+0x3>
	}
}
 e26:	ff 91       	pop	r31
 e28:	ef 91       	pop	r30
 e2a:	bf 91       	pop	r27
 e2c:	af 91       	pop	r26
 e2e:	9f 91       	pop	r25
 e30:	8f 91       	pop	r24
 e32:	7f 91       	pop	r23
 e34:	6f 91       	pop	r22
 e36:	5f 91       	pop	r21
 e38:	4f 91       	pop	r20
 e3a:	3f 91       	pop	r19
 e3c:	2f 91       	pop	r18
 e3e:	0f 90       	pop	r0
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	0f 90       	pop	r0
 e44:	1f 90       	pop	r1
 e46:	18 95       	reti

Disassembly of section .text.M_UART_Void_UARTInit:

000013fe <M_UART_Void_UARTInit>:
	return 0;
}

void M_UART_Void_UARTClear(void)
{
	UDR_REG=0;
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	88 e2       	ldi	r24, 0x28	; 40
    1402:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	89 e2       	ldi	r24, 0x29	; 41
    140a:	0e 94 03 02 	call	0x406	; 0x406 <M_DIO_Void_SetPinDirection>
    140e:	8a b1       	in	r24, 0x0a	; 10
    1410:	8b 7f       	andi	r24, 0xFB	; 251
    1412:	8a b9       	out	0x0a, r24	; 10
    1414:	86 e8       	ldi	r24, 0x86	; 134
    1416:	80 bd       	out	0x20, r24	; 32
    1418:	87 e6       	ldi	r24, 0x67	; 103
    141a:	89 b9       	out	0x09, r24	; 9
    141c:	8a b1       	in	r24, 0x0a	; 10
    141e:	80 68       	ori	r24, 0x80	; 128
    1420:	8a b9       	out	0x0a, r24	; 10
    1422:	8a b1       	in	r24, 0x0a	; 10
    1424:	80 61       	ori	r24, 0x10	; 16
    1426:	8a b9       	out	0x0a, r24	; 10
    1428:	8a b1       	in	r24, 0x0a	; 10
    142a:	88 60       	ori	r24, 0x08	; 8
    142c:	8a b9       	out	0x0a, r24	; 10
    142e:	08 95       	ret

Disassembly of section .text.M_UART_Void_UARTSetCallBack:

000015ae <M_UART_Void_UARTSetCallBack>:
}
void M_UART_Void_UARTSetCallBack(void(*Copy_Ptr)(void))
{
	UART_CallBack = Copy_Ptr;
    15ae:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <UART_CallBack+0x1>
    15b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <UART_CallBack>
    15b6:	08 95       	ret

Disassembly of section .text.__vector_13:

00001278 <__vector_13>:
	return 0;
}

void M_UART_Void_UARTClear(void)
{
	UDR_REG=0;
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <UART_CallBack>
    129e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <UART_CallBack+0x1>
    12a2:	09 95       	icall
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	bf 91       	pop	r27
    12aa:	af 91       	pop	r26
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	7f 91       	pop	r23
    12b2:	6f 91       	pop	r22
    12b4:	5f 91       	pop	r21
    12b6:	4f 91       	pop	r20
    12b8:	3f 91       	pop	r19
    12ba:	2f 91       	pop	r18
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti

Disassembly of section .text:

00001534 <__subsf3>:
    1534:	50 58       	subi	r21, 0x80	; 128

00001536 <__addsf3>:
    1536:	bb 27       	eor	r27, r27
    1538:	aa 27       	eor	r26, r26
    153a:	0e 94 56 05 	call	0xaac	; 0xaac <__addsf3x>
    153e:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_round>

Disassembly of section .text:

00000aac <__addsf3x>:
 aac:	11 c0       	rjmp	.+34     	; 0xad0 <__addsf3x+0x24>
 aae:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_pscA>
 ab2:	38 f0       	brcs	.+14     	; 0xac2 <__addsf3x+0x16>
 ab4:	0e 94 af 0a 	call	0x155e	; 0x155e <__fp_pscB>
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__addsf3x+0x16>
 aba:	39 f4       	brne	.+14     	; 0xaca <__addsf3x+0x1e>
 abc:	9f 3f       	cpi	r25, 0xFF	; 255
 abe:	19 f4       	brne	.+6      	; 0xac6 <__addsf3x+0x1a>
 ac0:	26 f4       	brtc	.+8      	; 0xaca <__addsf3x+0x1e>
 ac2:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_nan>
 ac6:	0e f4       	brtc	.+2      	; 0xaca <__addsf3x+0x1e>
 ac8:	e0 95       	com	r30
 aca:	e7 fb       	bst	r30, 7
 acc:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_inf>
 ad0:	e9 2f       	mov	r30, r25
 ad2:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_split3>
 ad6:	58 f3       	brcs	.-42     	; 0xaae <__addsf3x+0x2>
 ad8:	ba 17       	cp	r27, r26
 ada:	62 07       	cpc	r22, r18
 adc:	73 07       	cpc	r23, r19
 ade:	84 07       	cpc	r24, r20
 ae0:	95 07       	cpc	r25, r21
 ae2:	20 f0       	brcs	.+8      	; 0xaec <__addsf3x+0x40>
 ae4:	79 f4       	brne	.+30     	; 0xb04 <__addsf3x+0x58>
 ae6:	a6 f5       	brtc	.+104    	; 0xb50 <__addsf3x+0xa4>
 ae8:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_zero>
 aec:	0e f4       	brtc	.+2      	; 0xaf0 <__addsf3x+0x44>
 aee:	e0 95       	com	r30
 af0:	0b 2e       	mov	r0, r27
 af2:	ba 2f       	mov	r27, r26
 af4:	a0 2d       	mov	r26, r0
 af6:	0b 01       	movw	r0, r22
 af8:	b9 01       	movw	r22, r18
 afa:	90 01       	movw	r18, r0
 afc:	0c 01       	movw	r0, r24
 afe:	ca 01       	movw	r24, r20
 b00:	a0 01       	movw	r20, r0
 b02:	11 24       	eor	r1, r1
 b04:	ff 27       	eor	r31, r31
 b06:	59 1b       	sub	r21, r25
 b08:	99 f0       	breq	.+38     	; 0xb30 <__addsf3x+0x84>
 b0a:	59 3f       	cpi	r21, 0xF9	; 249
 b0c:	50 f4       	brcc	.+20     	; 0xb22 <__addsf3x+0x76>
 b0e:	50 3e       	cpi	r21, 0xE0	; 224
 b10:	68 f1       	brcs	.+90     	; 0xb6c <__addsf3x+0xc0>
 b12:	1a 16       	cp	r1, r26
 b14:	f0 40       	sbci	r31, 0x00	; 0
 b16:	a2 2f       	mov	r26, r18
 b18:	23 2f       	mov	r18, r19
 b1a:	34 2f       	mov	r19, r20
 b1c:	44 27       	eor	r20, r20
 b1e:	58 5f       	subi	r21, 0xF8	; 248
 b20:	f3 cf       	rjmp	.-26     	; 0xb08 <__addsf3x+0x5c>
 b22:	46 95       	lsr	r20
 b24:	37 95       	ror	r19
 b26:	27 95       	ror	r18
 b28:	a7 95       	ror	r26
 b2a:	f0 40       	sbci	r31, 0x00	; 0
 b2c:	53 95       	inc	r21
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__addsf3x+0x76>
 b30:	7e f4       	brtc	.+30     	; 0xb50 <__addsf3x+0xa4>
 b32:	1f 16       	cp	r1, r31
 b34:	ba 0b       	sbc	r27, r26
 b36:	62 0b       	sbc	r22, r18
 b38:	73 0b       	sbc	r23, r19
 b3a:	84 0b       	sbc	r24, r20
 b3c:	ba f0       	brmi	.+46     	; 0xb6c <__addsf3x+0xc0>
 b3e:	91 50       	subi	r25, 0x01	; 1
 b40:	a1 f0       	breq	.+40     	; 0xb6a <__addsf3x+0xbe>
 b42:	ff 0f       	add	r31, r31
 b44:	bb 1f       	adc	r27, r27
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	c2 f7       	brpl	.-16     	; 0xb3e <__addsf3x+0x92>
 b4e:	0e c0       	rjmp	.+28     	; 0xb6c <__addsf3x+0xc0>
 b50:	ba 0f       	add	r27, r26
 b52:	62 1f       	adc	r22, r18
 b54:	73 1f       	adc	r23, r19
 b56:	84 1f       	adc	r24, r20
 b58:	48 f4       	brcc	.+18     	; 0xb6c <__addsf3x+0xc0>
 b5a:	87 95       	ror	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	9e 3f       	cpi	r25, 0xFE	; 254
 b66:	08 f0       	brcs	.+2      	; 0xb6a <__addsf3x+0xbe>
 b68:	b0 cf       	rjmp	.-160    	; 0xaca <__addsf3x+0x1e>
 b6a:	93 95       	inc	r25
 b6c:	88 0f       	add	r24, r24
 b6e:	08 f0       	brcs	.+2      	; 0xb72 <__addsf3x+0xc6>
 b70:	99 27       	eor	r25, r25
 b72:	ee 0f       	add	r30, r30
 b74:	97 95       	ror	r25
 b76:	87 95       	ror	r24
 b78:	08 95       	ret

Disassembly of section .text:

000015d2 <__divsf3>:
    15d2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divsf3x>
    15d6:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_round>

Disassembly of section .text:

000008fa <__divsf3x>:
 8fa:	10 c0       	rjmp	.+32     	; 0x91c <__divsf3x+0x22>
 8fc:	0e 94 af 0a 	call	0x155e	; 0x155e <__fp_pscB>
 900:	58 f0       	brcs	.+22     	; 0x918 <__divsf3x+0x1e>
 902:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_pscA>
 906:	40 f0       	brcs	.+16     	; 0x918 <__divsf3x+0x1e>
 908:	29 f4       	brne	.+10     	; 0x914 <__divsf3x+0x1a>
 90a:	5f 3f       	cpi	r21, 0xFF	; 255
 90c:	29 f0       	breq	.+10     	; 0x918 <__divsf3x+0x1e>
 90e:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_inf>
 912:	51 11       	cpse	r21, r1
 914:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_szero>
 918:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_nan>
 91c:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_split3>
 920:	68 f3       	brcs	.-38     	; 0x8fc <__divsf3x+0x2>

00000922 <__divsf3_pse>:
 922:	99 23       	and	r25, r25
 924:	b1 f3       	breq	.-20     	; 0x912 <__divsf3x+0x18>
 926:	55 23       	and	r21, r21
 928:	91 f3       	breq	.-28     	; 0x90e <__divsf3x+0x14>
 92a:	95 1b       	sub	r25, r21
 92c:	55 0b       	sbc	r21, r21
 92e:	bb 27       	eor	r27, r27
 930:	aa 27       	eor	r26, r26
 932:	62 17       	cp	r22, r18
 934:	73 07       	cpc	r23, r19
 936:	84 07       	cpc	r24, r20
 938:	38 f0       	brcs	.+14     	; 0x948 <__divsf3_pse+0x26>
 93a:	9f 5f       	subi	r25, 0xFF	; 255
 93c:	5f 4f       	sbci	r21, 0xFF	; 255
 93e:	22 0f       	add	r18, r18
 940:	33 1f       	adc	r19, r19
 942:	44 1f       	adc	r20, r20
 944:	aa 1f       	adc	r26, r26
 946:	a9 f3       	breq	.-22     	; 0x932 <__divsf3_pse+0x10>
 948:	35 d0       	rcall	.+106    	; 0x9b4 <__divsf3_pse+0x92>
 94a:	0e 2e       	mov	r0, r30
 94c:	3a f0       	brmi	.+14     	; 0x95c <__divsf3_pse+0x3a>
 94e:	e0 e8       	ldi	r30, 0x80	; 128
 950:	32 d0       	rcall	.+100    	; 0x9b6 <__divsf3_pse+0x94>
 952:	91 50       	subi	r25, 0x01	; 1
 954:	50 40       	sbci	r21, 0x00	; 0
 956:	e6 95       	lsr	r30
 958:	00 1c       	adc	r0, r0
 95a:	ca f7       	brpl	.-14     	; 0x94e <__divsf3_pse+0x2c>
 95c:	2b d0       	rcall	.+86     	; 0x9b4 <__divsf3_pse+0x92>
 95e:	fe 2f       	mov	r31, r30
 960:	29 d0       	rcall	.+82     	; 0x9b4 <__divsf3_pse+0x92>
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	bb 1f       	adc	r27, r27
 96a:	26 17       	cp	r18, r22
 96c:	37 07       	cpc	r19, r23
 96e:	48 07       	cpc	r20, r24
 970:	ab 07       	cpc	r26, r27
 972:	b0 e8       	ldi	r27, 0x80	; 128
 974:	09 f0       	breq	.+2      	; 0x978 <__divsf3_pse+0x56>
 976:	bb 0b       	sbc	r27, r27
 978:	80 2d       	mov	r24, r0
 97a:	bf 01       	movw	r22, r30
 97c:	ff 27       	eor	r31, r31
 97e:	93 58       	subi	r25, 0x83	; 131
 980:	5f 4f       	sbci	r21, 0xFF	; 255
 982:	3a f0       	brmi	.+14     	; 0x992 <__divsf3_pse+0x70>
 984:	9e 3f       	cpi	r25, 0xFE	; 254
 986:	51 05       	cpc	r21, r1
 988:	78 f0       	brcs	.+30     	; 0x9a8 <__divsf3_pse+0x86>
 98a:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_inf>
 98e:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	e4 f3       	brlt	.-8      	; 0x98e <__divsf3_pse+0x6c>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	d4 f3       	brlt	.-12     	; 0x98e <__divsf3_pse+0x6c>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	9f 5f       	subi	r25, 0xFF	; 255
 9a6:	c9 f7       	brne	.-14     	; 0x99a <__divsf3_pse+0x78>
 9a8:	88 0f       	add	r24, r24
 9aa:	91 1d       	adc	r25, r1
 9ac:	96 95       	lsr	r25
 9ae:	87 95       	ror	r24
 9b0:	97 f9       	bld	r25, 7
 9b2:	08 95       	ret
 9b4:	e1 e0       	ldi	r30, 0x01	; 1
 9b6:	66 0f       	add	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	bb 1f       	adc	r27, r27
 9be:	62 17       	cp	r22, r18
 9c0:	73 07       	cpc	r23, r19
 9c2:	84 07       	cpc	r24, r20
 9c4:	ba 07       	cpc	r27, r26
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__divsf3_pse+0xae>
 9c8:	62 1b       	sub	r22, r18
 9ca:	73 0b       	sbc	r23, r19
 9cc:	84 0b       	sbc	r24, r20
 9ce:	ba 0b       	sbc	r27, r26
 9d0:	ee 1f       	adc	r30, r30
 9d2:	88 f7       	brcc	.-30     	; 0x9b6 <__divsf3_pse+0x94>
 9d4:	e0 95       	com	r30
 9d6:	08 95       	ret

Disassembly of section .text:

00001542 <__fixsfsi>:
    1542:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
    1546:	68 94       	set
    1548:	b1 11       	cpse	r27, r1
    154a:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_szero>
    154e:	08 95       	ret

Disassembly of section .text:

00001112 <__fixunssfsi>:
    1112:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x28>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	98 f0       	brcs	.+38     	; 0x1142 <__fixunssfsi+0x30>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	b0 f0       	brcs	.+44     	; 0x1150 <__fixunssfsi+0x3e>
    1124:	e1 f0       	breq	.+56     	; 0x115e <__fixunssfsi+0x4c>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x24>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x14>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <__fixunssfsi+0x4c>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	91 f0       	breq	.+36     	; 0x115e <__fixunssfsi+0x4c>
    113a:	0e 94 b6 0a 	call	0x156c	; 0x156c <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_zero>
    1146:	67 2f       	mov	r22, r23
    1148:	78 2f       	mov	r23, r24
    114a:	88 27       	eor	r24, r24
    114c:	b8 5f       	subi	r27, 0xF8	; 248
    114e:	39 f0       	breq	.+14     	; 0x115e <__fixunssfsi+0x4c>
    1150:	b9 3f       	cpi	r27, 0xF9	; 249
    1152:	cc f3       	brlt	.-14     	; 0x1146 <__fixunssfsi+0x34>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b3 95       	inc	r27
    115c:	d9 f7       	brne	.-10     	; 0x1154 <__fixunssfsi+0x42>
    115e:	3e f4       	brtc	.+14     	; 0x116e <__fixunssfsi+0x5c>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	08 95       	ret

Disassembly of section .text:

00000f52 <__floatunsisf>:
 f52:	e8 94       	clt
 f54:	09 c0       	rjmp	.+18     	; 0xf68 <__floatsisf+0x12>

00000f56 <__floatsisf>:
 f56:	97 fb       	bst	r25, 7
 f58:	3e f4       	brtc	.+14     	; 0xf68 <__floatsisf+0x12>
 f5a:	90 95       	com	r25
 f5c:	80 95       	com	r24
 f5e:	70 95       	com	r23
 f60:	61 95       	neg	r22
 f62:	7f 4f       	sbci	r23, 0xFF	; 255
 f64:	8f 4f       	sbci	r24, 0xFF	; 255
 f66:	9f 4f       	sbci	r25, 0xFF	; 255
 f68:	99 23       	and	r25, r25
 f6a:	a9 f0       	breq	.+42     	; 0xf96 <__floatsisf+0x40>
 f6c:	f9 2f       	mov	r31, r25
 f6e:	96 e9       	ldi	r25, 0x96	; 150
 f70:	bb 27       	eor	r27, r27
 f72:	93 95       	inc	r25
 f74:	f6 95       	lsr	r31
 f76:	87 95       	ror	r24
 f78:	77 95       	ror	r23
 f7a:	67 95       	ror	r22
 f7c:	b7 95       	ror	r27
 f7e:	f1 11       	cpse	r31, r1
 f80:	f8 cf       	rjmp	.-16     	; 0xf72 <__floatsisf+0x1c>
 f82:	fa f4       	brpl	.+62     	; 0xfc2 <__floatsisf+0x6c>
 f84:	bb 0f       	add	r27, r27
 f86:	11 f4       	brne	.+4      	; 0xf8c <__floatsisf+0x36>
 f88:	60 ff       	sbrs	r22, 0
 f8a:	1b c0       	rjmp	.+54     	; 0xfc2 <__floatsisf+0x6c>
 f8c:	6f 5f       	subi	r22, 0xFF	; 255
 f8e:	7f 4f       	sbci	r23, 0xFF	; 255
 f90:	8f 4f       	sbci	r24, 0xFF	; 255
 f92:	9f 4f       	sbci	r25, 0xFF	; 255
 f94:	16 c0       	rjmp	.+44     	; 0xfc2 <__floatsisf+0x6c>
 f96:	88 23       	and	r24, r24
 f98:	11 f0       	breq	.+4      	; 0xf9e <__floatsisf+0x48>
 f9a:	96 e9       	ldi	r25, 0x96	; 150
 f9c:	11 c0       	rjmp	.+34     	; 0xfc0 <__floatsisf+0x6a>
 f9e:	77 23       	and	r23, r23
 fa0:	21 f0       	breq	.+8      	; 0xfaa <__floatsisf+0x54>
 fa2:	9e e8       	ldi	r25, 0x8E	; 142
 fa4:	87 2f       	mov	r24, r23
 fa6:	76 2f       	mov	r23, r22
 fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <__floatsisf+0x5e>
 faa:	66 23       	and	r22, r22
 fac:	71 f0       	breq	.+28     	; 0xfca <__floatsisf+0x74>
 fae:	96 e8       	ldi	r25, 0x86	; 134
 fb0:	86 2f       	mov	r24, r22
 fb2:	70 e0       	ldi	r23, 0x00	; 0
 fb4:	60 e0       	ldi	r22, 0x00	; 0
 fb6:	2a f0       	brmi	.+10     	; 0xfc2 <__floatsisf+0x6c>
 fb8:	9a 95       	dec	r25
 fba:	66 0f       	add	r22, r22
 fbc:	77 1f       	adc	r23, r23
 fbe:	88 1f       	adc	r24, r24
 fc0:	da f7       	brpl	.-10     	; 0xfb8 <__floatsisf+0x62>
 fc2:	88 0f       	add	r24, r24
 fc4:	96 95       	lsr	r25
 fc6:	87 95       	ror	r24
 fc8:	97 f9       	bld	r25, 7
 fca:	08 95       	ret

Disassembly of section .text:

000012c6 <__fp_cmp>:
    12c6:	99 0f       	add	r25, r25
    12c8:	00 08       	sbc	r0, r0
    12ca:	55 0f       	add	r21, r21
    12cc:	aa 0b       	sbc	r26, r26
    12ce:	e0 e8       	ldi	r30, 0x80	; 128
    12d0:	fe ef       	ldi	r31, 0xFE	; 254
    12d2:	16 16       	cp	r1, r22
    12d4:	17 06       	cpc	r1, r23
    12d6:	e8 07       	cpc	r30, r24
    12d8:	f9 07       	cpc	r31, r25
    12da:	c0 f0       	brcs	.+48     	; 0x130c <__fp_cmp+0x46>
    12dc:	12 16       	cp	r1, r18
    12de:	13 06       	cpc	r1, r19
    12e0:	e4 07       	cpc	r30, r20
    12e2:	f5 07       	cpc	r31, r21
    12e4:	98 f0       	brcs	.+38     	; 0x130c <__fp_cmp+0x46>
    12e6:	62 1b       	sub	r22, r18
    12e8:	73 0b       	sbc	r23, r19
    12ea:	84 0b       	sbc	r24, r20
    12ec:	95 0b       	sbc	r25, r21
    12ee:	39 f4       	brne	.+14     	; 0x12fe <__fp_cmp+0x38>
    12f0:	0a 26       	eor	r0, r26
    12f2:	61 f0       	breq	.+24     	; 0x130c <__fp_cmp+0x46>
    12f4:	23 2b       	or	r18, r19
    12f6:	24 2b       	or	r18, r20
    12f8:	25 2b       	or	r18, r21
    12fa:	21 f4       	brne	.+8      	; 0x1304 <__fp_cmp+0x3e>
    12fc:	08 95       	ret
    12fe:	0a 26       	eor	r0, r26
    1300:	09 f4       	brne	.+2      	; 0x1304 <__fp_cmp+0x3e>
    1302:	a1 40       	sbci	r26, 0x01	; 1
    1304:	a6 95       	lsr	r26
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	81 1d       	adc	r24, r1
    130a:	81 1d       	adc	r24, r1
    130c:	08 95       	ret

Disassembly of section .text:

0000157a <__fp_inf>:
    157a:	97 f9       	bld	r25, 7
    157c:	9f 67       	ori	r25, 0x7F	; 127
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	08 95       	ret

Disassembly of section .text:

000015e2 <__fp_nan>:
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	80 ec       	ldi	r24, 0xC0	; 192
    15e6:	08 95       	ret

Disassembly of section .text:

00001550 <__fp_pscA>:
    1550:	00 24       	eor	r0, r0
    1552:	0a 94       	dec	r0
    1554:	16 16       	cp	r1, r22
    1556:	17 06       	cpc	r1, r23
    1558:	18 06       	cpc	r1, r24
    155a:	09 06       	cpc	r0, r25
    155c:	08 95       	ret

Disassembly of section .text:

0000155e <__fp_pscB>:
    155e:	00 24       	eor	r0, r0
    1560:	0a 94       	dec	r0
    1562:	12 16       	cp	r1, r18
    1564:	13 06       	cpc	r1, r19
    1566:	14 06       	cpc	r1, r20
    1568:	05 06       	cpc	r0, r21
    156a:	08 95       	ret

Disassembly of section .text:

000014b4 <__fp_round>:
    14b4:	09 2e       	mov	r0, r25
    14b6:	03 94       	inc	r0
    14b8:	00 0c       	add	r0, r0
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__fp_round+0xc>
    14bc:	88 23       	and	r24, r24
    14be:	52 f0       	brmi	.+20     	; 0x14d4 <__fp_round+0x20>
    14c0:	bb 0f       	add	r27, r27
    14c2:	40 f4       	brcc	.+16     	; 0x14d4 <__fp_round+0x20>
    14c4:	bf 2b       	or	r27, r31
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__fp_round+0x18>
    14c8:	60 ff       	sbrs	r22, 0
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <__fp_round+0x20>
    14cc:	6f 5f       	subi	r22, 0xFF	; 255
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	08 95       	ret

Disassembly of section .text:

0000130e <__fp_split3>:
    130e:	57 fd       	sbrc	r21, 7
    1310:	90 58       	subi	r25, 0x80	; 128
    1312:	44 0f       	add	r20, r20
    1314:	55 1f       	adc	r21, r21
    1316:	59 f0       	breq	.+22     	; 0x132e <__fp_splitA+0x10>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	71 f0       	breq	.+28     	; 0x1338 <__fp_splitA+0x1a>
    131c:	47 95       	ror	r20

0000131e <__fp_splitA>:
    131e:	88 0f       	add	r24, r24
    1320:	97 fb       	bst	r25, 7
    1322:	99 1f       	adc	r25, r25
    1324:	61 f0       	breq	.+24     	; 0x133e <__fp_splitA+0x20>
    1326:	9f 3f       	cpi	r25, 0xFF	; 255
    1328:	79 f0       	breq	.+30     	; 0x1348 <__fp_splitA+0x2a>
    132a:	87 95       	ror	r24
    132c:	08 95       	ret
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	14 06       	cpc	r1, r20
    1334:	55 1f       	adc	r21, r21
    1336:	f2 cf       	rjmp	.-28     	; 0x131c <__fp_split3+0xe>
    1338:	46 95       	lsr	r20
    133a:	f1 df       	rcall	.-30     	; 0x131e <__fp_splitA>
    133c:	08 c0       	rjmp	.+16     	; 0x134e <__fp_splitA+0x30>
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	18 06       	cpc	r1, r24
    1344:	99 1f       	adc	r25, r25
    1346:	f1 cf       	rjmp	.-30     	; 0x132a <__fp_splitA+0xc>
    1348:	86 95       	lsr	r24
    134a:	71 05       	cpc	r23, r1
    134c:	61 05       	cpc	r22, r1
    134e:	08 94       	sec
    1350:	08 95       	ret

Disassembly of section .text:

0000156c <__fp_zero>:
    156c:	e8 94       	clt

0000156e <__fp_szero>:
    156e:	bb 27       	eor	r27, r27
    1570:	66 27       	eor	r22, r22
    1572:	77 27       	eor	r23, r23
    1574:	cb 01       	movw	r24, r22
    1576:	97 f9       	bld	r25, 7
    1578:	08 95       	ret

Disassembly of section .text:

000015b8 <__gesf2>:
    15b8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fp_cmp>
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <__gesf2+0x8>
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	08 95       	ret

Disassembly of section .text:

000015da <__mulsf3>:
    15da:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__mulsf3x>
    15de:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_round>

Disassembly of section .text:

000009d8 <__mulsf3x>:
 9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <__mulsf3x+0x20>
 9da:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_pscA>
 9de:	38 f0       	brcs	.+14     	; 0x9ee <__mulsf3x+0x16>
 9e0:	0e 94 af 0a 	call	0x155e	; 0x155e <__fp_pscB>
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__mulsf3x+0x16>
 9e6:	95 23       	and	r25, r21
 9e8:	11 f0       	breq	.+4      	; 0x9ee <__mulsf3x+0x16>
 9ea:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_inf>
 9ee:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_nan>
 9f2:	11 24       	eor	r1, r1
 9f4:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_szero>
 9f8:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_split3>
 9fc:	70 f3       	brcs	.-36     	; 0x9da <__mulsf3x+0x2>

000009fe <__mulsf3_pse>:
 9fe:	95 9f       	mul	r25, r21
 a00:	c1 f3       	breq	.-16     	; 0x9f2 <__mulsf3x+0x1a>
 a02:	95 0f       	add	r25, r21
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	55 1f       	adc	r21, r21
 a08:	62 9f       	mul	r22, r18
 a0a:	f0 01       	movw	r30, r0
 a0c:	72 9f       	mul	r23, r18
 a0e:	bb 27       	eor	r27, r27
 a10:	f0 0d       	add	r31, r0
 a12:	b1 1d       	adc	r27, r1
 a14:	63 9f       	mul	r22, r19
 a16:	aa 27       	eor	r26, r26
 a18:	f0 0d       	add	r31, r0
 a1a:	b1 1d       	adc	r27, r1
 a1c:	aa 1f       	adc	r26, r26
 a1e:	64 9f       	mul	r22, r20
 a20:	66 27       	eor	r22, r22
 a22:	b0 0d       	add	r27, r0
 a24:	a1 1d       	adc	r26, r1
 a26:	66 1f       	adc	r22, r22
 a28:	82 9f       	mul	r24, r18
 a2a:	22 27       	eor	r18, r18
 a2c:	b0 0d       	add	r27, r0
 a2e:	a1 1d       	adc	r26, r1
 a30:	62 1f       	adc	r22, r18
 a32:	73 9f       	mul	r23, r19
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	62 1f       	adc	r22, r18
 a3a:	83 9f       	mul	r24, r19
 a3c:	a0 0d       	add	r26, r0
 a3e:	61 1d       	adc	r22, r1
 a40:	22 1f       	adc	r18, r18
 a42:	74 9f       	mul	r23, r20
 a44:	33 27       	eor	r19, r19
 a46:	a0 0d       	add	r26, r0
 a48:	61 1d       	adc	r22, r1
 a4a:	23 1f       	adc	r18, r19
 a4c:	84 9f       	mul	r24, r20
 a4e:	60 0d       	add	r22, r0
 a50:	21 1d       	adc	r18, r1
 a52:	82 2f       	mov	r24, r18
 a54:	76 2f       	mov	r23, r22
 a56:	6a 2f       	mov	r22, r26
 a58:	11 24       	eor	r1, r1
 a5a:	9f 57       	subi	r25, 0x7F	; 127
 a5c:	50 40       	sbci	r21, 0x00	; 0
 a5e:	9a f0       	brmi	.+38     	; 0xa86 <__mulsf3_pse+0x88>
 a60:	f1 f0       	breq	.+60     	; 0xa9e <__mulsf3_pse+0xa0>
 a62:	88 23       	and	r24, r24
 a64:	4a f0       	brmi	.+18     	; 0xa78 <__mulsf3_pse+0x7a>
 a66:	ee 0f       	add	r30, r30
 a68:	ff 1f       	adc	r31, r31
 a6a:	bb 1f       	adc	r27, r27
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	91 50       	subi	r25, 0x01	; 1
 a74:	50 40       	sbci	r21, 0x00	; 0
 a76:	a9 f7       	brne	.-22     	; 0xa62 <__mulsf3_pse+0x64>
 a78:	9e 3f       	cpi	r25, 0xFE	; 254
 a7a:	51 05       	cpc	r21, r1
 a7c:	80 f0       	brcs	.+32     	; 0xa9e <__mulsf3_pse+0xa0>
 a7e:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_inf>
 a82:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_szero>
 a86:	5f 3f       	cpi	r21, 0xFF	; 255
 a88:	e4 f3       	brlt	.-8      	; 0xa82 <__mulsf3_pse+0x84>
 a8a:	98 3e       	cpi	r25, 0xE8	; 232
 a8c:	d4 f3       	brlt	.-12     	; 0xa82 <__mulsf3_pse+0x84>
 a8e:	86 95       	lsr	r24
 a90:	77 95       	ror	r23
 a92:	67 95       	ror	r22
 a94:	b7 95       	ror	r27
 a96:	f7 95       	ror	r31
 a98:	e7 95       	ror	r30
 a9a:	9f 5f       	subi	r25, 0xFF	; 255
 a9c:	c1 f7       	brne	.-16     	; 0xa8e <__mulsf3_pse+0x90>
 a9e:	fe 2b       	or	r31, r30
 aa0:	88 0f       	add	r24, r24
 aa2:	91 1d       	adc	r25, r1
 aa4:	96 95       	lsr	r25
 aa6:	87 95       	ror	r24
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001352 <__udivmodsi4>:
    1352:	a1 e2       	ldi	r26, 0x21	; 33
    1354:	1a 2e       	mov	r1, r26
    1356:	aa 1b       	sub	r26, r26
    1358:	bb 1b       	sub	r27, r27
    135a:	fd 01       	movw	r30, r26
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <__udivmodsi4_ep>

0000135e <__udivmodsi4_loop>:
    135e:	aa 1f       	adc	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	ee 1f       	adc	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	a2 17       	cp	r26, r18
    1368:	b3 07       	cpc	r27, r19
    136a:	e4 07       	cpc	r30, r20
    136c:	f5 07       	cpc	r31, r21
    136e:	20 f0       	brcs	.+8      	; 0x1378 <__udivmodsi4_ep>
    1370:	a2 1b       	sub	r26, r18
    1372:	b3 0b       	sbc	r27, r19
    1374:	e4 0b       	sbc	r30, r20
    1376:	f5 0b       	sbc	r31, r21

00001378 <__udivmodsi4_ep>:
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	1a 94       	dec	r1
    1382:	69 f7       	brne	.-38     	; 0x135e <__udivmodsi4_loop>
    1384:	60 95       	com	r22
    1386:	70 95       	com	r23
    1388:	80 95       	com	r24
    138a:	90 95       	com	r25
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	bd 01       	movw	r22, r26
    1392:	cf 01       	movw	r24, r30
    1394:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001460 <__divmodsi4>:
    1460:	05 2e       	mov	r0, r21
    1462:	97 fb       	bst	r25, 7
    1464:	1e f4       	brtc	.+6      	; 0x146c <__divmodsi4+0xc>
    1466:	00 94       	com	r0
    1468:	0e 94 92 0a 	call	0x1524	; 0x1524 <__negsi2>
    146c:	57 fd       	sbrc	r21, 7
    146e:	07 d0       	rcall	.+14     	; 0x147e <__divmodsi4_neg2>
    1470:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
    1474:	07 fc       	sbrc	r0, 7
    1476:	03 d0       	rcall	.+6      	; 0x147e <__divmodsi4_neg2>
    1478:	4e f4       	brtc	.+18     	; 0x148c <__divmodsi4_exit>
    147a:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__negsi2>

0000147e <__divmodsi4_neg2>:
    147e:	50 95       	com	r21
    1480:	40 95       	com	r20
    1482:	30 95       	com	r19
    1484:	21 95       	neg	r18
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	4f 4f       	sbci	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255

0000148c <__divmodsi4_exit>:
    148c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001524 <__negsi2>:
    1524:	90 95       	com	r25
    1526:	80 95       	com	r24
    1528:	70 95       	com	r23
    152a:	61 95       	neg	r22
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	08 95       	ret

Disassembly of section .text.libgcc:

000014f4 <__movmemx_qi>:
    14f4:	99 27       	eor	r25, r25

000014f6 <__movmemx_hi>:
    14f6:	77 fd       	sbrc	r23, 7
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <__movmemx_hi+0xe>
    14fa:	05 90       	lpm	r0, Z+
    14fc:	0d 92       	st	X+, r0
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	e1 f7       	brne	.-8      	; 0x14fa <__movmemx_hi+0x4>
    1502:	08 95       	ret
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	e1 f7       	brne	.-8      	; 0x1504 <__movmemx_hi+0xe>
    150c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000015f0 <_fini>:
    15f0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000015f2 <__funcs_on_exit>:
    15f2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000015f4 <__simulator_exit>:
    15f4:	08 95       	ret

Disassembly of section .text.exit:

0000150e <exit>:
    150e:	ec 01       	movw	r28, r24
    1510:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__funcs_on_exit>
    1514:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_fini>
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__simulator_exit>
    151e:	ce 01       	movw	r24, r28
    1520:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_Exit>

Disassembly of section .text._Exit:

000015ec <_Exit>:
    15ec:	0e 94 61 00 	call	0xc2	; 0xc2 <_exit>
